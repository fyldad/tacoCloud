{
  "contexts": {
    "application": {
      "positiveMatches": {
        "RabbitHealthContributorAutoConfiguration": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required class 'org.springframework.amqp.rabbit.core.RabbitTemplate'"
          },
          {
            "condition": "OnEnabledHealthIndicatorCondition",
            "message": "@ConditionalOnEnabledHealthIndicator management.health.defaults.enabled is considered true"
          },
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnBean (types: org.springframework.amqp.rabbit.core.RabbitTemplate; SearchStrategy: all) found bean 'rabbitTemplate'"
          }
        ],
        "RabbitHealthContributorAutoConfiguration#rabbitHealthContributor": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (names: rabbitHealthIndicator,rabbitHealthContributor; SearchStrategy: all) did not find any beans"
          }
        ],
        "AuditEventsEndpointAutoConfiguration": [
          {
            "condition": "OnAvailableEndpointCondition",
            "message": "@ConditionalOnAvailableEndpoint marked as exposed by a 'management.endpoints.web.exposure' property"
          }
        ],
        "BeansEndpointAutoConfiguration": [
          {
            "condition": "OnAvailableEndpointCondition",
            "message": "@ConditionalOnAvailableEndpoint marked as exposed by a 'management.endpoints.web.exposure' property"
          }
        ],
        "BeansEndpointAutoConfiguration#beansEndpoint": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.beans.BeansEndpoint; SearchStrategy: all) did not find any beans"
          }
        ],
        "CachesEndpointAutoConfiguration": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required class 'org.springframework.cache.CacheManager'"
          },
          {
            "condition": "OnAvailableEndpointCondition",
            "message": "@ConditionalOnAvailableEndpoint marked as exposed by a 'management.endpoints.web.exposure' property"
          }
        ],
        "CachesEndpointAutoConfiguration#cachesEndpoint": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.cache.CachesEndpoint; SearchStrategy: all) did not find any beans"
          }
        ],
        "CachesEndpointAutoConfiguration#cachesEndpointWebExtension": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnBean (types: org.springframework.boot.actuate.cache.CachesEndpoint; SearchStrategy: all) found bean 'cachesEndpoint'; @ConditionalOnMissingBean (types: org.springframework.boot.actuate.cache.CachesEndpointWebExtension; SearchStrategy: all) did not find any beans"
          },
          {
            "condition": "OnAvailableEndpointCondition",
            "message": "@ConditionalOnAvailableEndpoint marked as exposed by a 'management.endpoints.web.exposure' property"
          }
        ],
        "ConditionsReportEndpointAutoConfiguration": [
          {
            "condition": "OnAvailableEndpointCondition",
            "message": "@ConditionalOnAvailableEndpoint marked as exposed by a 'management.endpoints.web.exposure' property"
          }
        ],
        "ConditionsReportEndpointAutoConfiguration#conditionsReportEndpoint": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.autoconfigure.condition.ConditionsReportEndpoint; SearchStrategy: current) did not find any beans"
          }
        ],
        "ConfigurationPropertiesReportEndpointAutoConfiguration": [
          {
            "condition": "OnAvailableEndpointCondition",
            "message": "@ConditionalOnAvailableEndpoint marked as exposed by a 'management.endpoints.web.exposure' property"
          }
        ],
        "ConfigurationPropertiesReportEndpointAutoConfiguration#configurationPropertiesReportEndpoint": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.context.properties.ConfigurationPropertiesReportEndpoint; SearchStrategy: all) did not find any beans"
          }
        ],
        "ConfigurationPropertiesReportEndpointAutoConfiguration#configurationPropertiesReportEndpointWebExtension": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnBean (types: org.springframework.boot.actuate.context.properties.ConfigurationPropertiesReportEndpoint; SearchStrategy: all) found bean 'configurationPropertiesReportEndpoint'; @ConditionalOnMissingBean (types: org.springframework.boot.actuate.context.properties.ConfigurationPropertiesReportEndpointWebExtension; SearchStrategy: all) did not find any beans"
          },
          {
            "condition": "OnAvailableEndpointCondition",
            "message": "@ConditionalOnAvailableEndpoint marked as exposed by a 'management.endpoints.web.exposure' property"
          }
        ],
        "MongoHealthContributorAutoConfiguration": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required class 'org.springframework.data.mongodb.core.MongoTemplate'"
          },
          {
            "condition": "OnEnabledHealthIndicatorCondition",
            "message": "@ConditionalOnEnabledHealthIndicator management.health.defaults.enabled is considered true"
          },
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnBean (types: org.springframework.data.mongodb.core.MongoTemplate; SearchStrategy: all) found bean 'mongoTemplate'"
          }
        ],
        "MongoReactiveHealthContributorAutoConfiguration": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required classes 'org.springframework.data.mongodb.core.ReactiveMongoTemplate', 'reactor.core.publisher.Flux'"
          },
          {
            "condition": "OnEnabledHealthIndicatorCondition",
            "message": "@ConditionalOnEnabledHealthIndicator management.health.defaults.enabled is considered true"
          },
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnBean (types: org.springframework.data.mongodb.core.ReactiveMongoTemplate; SearchStrategy: all) found bean 'reactiveMongoTemplate'"
          }
        ],
        "MongoReactiveHealthContributorAutoConfiguration#mongoHealthContributor": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (names: mongoHealthIndicator,mongoHealthContributor; SearchStrategy: all) did not find any beans"
          }
        ],
        "EndpointAutoConfiguration#endpointCachingOperationInvokerAdvisor": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.endpoint.invoker.cache.CachingOperationInvokerAdvisor; SearchStrategy: all) did not find any beans"
          }
        ],
        "EndpointAutoConfiguration#endpointOperationParameterMapper": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.endpoint.invoke.ParameterValueMapper; SearchStrategy: all) did not find any beans"
          }
        ],
        "JacksonEndpointAutoConfiguration#endpointObjectMapper": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required classes 'com.fasterxml.jackson.databind.ObjectMapper', 'org.springframework.http.converter.json.Jackson2ObjectMapperBuilder'"
          },
          {
            "condition": "OnPropertyCondition",
            "message": "@ConditionalOnProperty (management.endpoints.jackson.isolated-object-mapper) matched"
          }
        ],
        "JmxEndpointAutoConfiguration": [
          {
            "condition": "OnPropertyCondition",
            "message": "@ConditionalOnProperty (spring.jmx.enabled=true) matched"
          }
        ],
        "JmxEndpointAutoConfiguration#endpointObjectNameFactory": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.endpoint.jmx.EndpointObjectNameFactory; SearchStrategy: current) did not find any beans"
          }
        ],
        "JmxEndpointAutoConfiguration#jmxAnnotationEndpointDiscoverer": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.endpoint.jmx.JmxEndpointsSupplier; SearchStrategy: all) did not find any beans"
          }
        ],
        "JmxEndpointAutoConfiguration#jmxMBeanExporter": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnSingleCandidate (types: javax.management.MBeanServer; SearchStrategy: all) found a single bean 'mbeanServer'"
          }
        ],
        "ServletEndpointManagementContextConfiguration": [
          {
            "condition": "OnWebApplicationCondition",
            "message": "found 'session' scope"
          }
        ],
        "ServletEndpointManagementContextConfiguration.WebMvcServletEndpointManagementContextConfiguration": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required class 'org.springframework.web.servlet.DispatcherServlet'"
          }
        ],
        "WebEndpointAutoConfiguration": [
          {
            "condition": "OnWebApplicationCondition",
            "message": "@ConditionalOnWebApplication (required) found 'session' scope"
          }
        ],
        "WebEndpointAutoConfiguration#controllerEndpointDiscoverer": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.endpoint.web.annotation.ControllerEndpointsSupplier; SearchStrategy: all) did not find any beans"
          }
        ],
        "WebEndpointAutoConfiguration#endpointMediaTypes": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.endpoint.web.EndpointMediaTypes; SearchStrategy: all) did not find any beans"
          }
        ],
        "WebEndpointAutoConfiguration#pathMappedEndpoints": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.endpoint.web.PathMappedEndpoints; SearchStrategy: all) did not find any beans"
          }
        ],
        "WebEndpointAutoConfiguration#webEndpointDiscoverer": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.endpoint.web.WebEndpointsSupplier; SearchStrategy: all) did not find any beans"
          }
        ],
        "WebEndpointAutoConfiguration.WebEndpointServletConfiguration": [
          {
            "condition": "OnWebApplicationCondition",
            "message": "found 'session' scope"
          }
        ],
        "WebEndpointAutoConfiguration.WebEndpointServletConfiguration#servletEndpointDiscoverer": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.endpoint.web.annotation.ServletEndpointsSupplier; SearchStrategy: all) did not find any beans"
          }
        ],
        "WebMvcEndpointManagementContextConfiguration": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required class 'org.springframework.web.servlet.DispatcherServlet'"
          },
          {
            "condition": "OnWebApplicationCondition",
            "message": "found 'session' scope"
          },
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnBean (types: org.springframework.web.servlet.DispatcherServlet,org.springframework.boot.actuate.endpoint.web.WebEndpointsSupplier; SearchStrategy: all) found beans 'webEndpointDiscoverer', 'dispatcherServlet'"
          }
        ],
        "WebMvcEndpointManagementContextConfiguration#controllerEndpointHandlerMapping": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.endpoint.web.servlet.ControllerEndpointHandlerMapping; SearchStrategy: all) did not find any beans"
          }
        ],
        "WebMvcEndpointManagementContextConfiguration#endpointObjectMapperWebMvcConfigurer": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnBean (types: org.springframework.boot.actuate.endpoint.jackson.EndpointObjectMapper; SearchStrategy: all) found bean 'endpointObjectMapper'"
          }
        ],
        "WebMvcEndpointManagementContextConfiguration#webEndpointServletHandlerMapping": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.endpoint.web.servlet.WebMvcEndpointHandlerMapping; SearchStrategy: all) did not find any beans"
          }
        ],
        "EnvironmentEndpointAutoConfiguration": [
          {
            "condition": "OnAvailableEndpointCondition",
            "message": "@ConditionalOnAvailableEndpoint marked as exposed by a 'management.endpoints.web.exposure' property"
          }
        ],
        "EnvironmentEndpointAutoConfiguration#environmentEndpoint": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.env.EnvironmentEndpoint; SearchStrategy: all) did not find any beans"
          }
        ],
        "EnvironmentEndpointAutoConfiguration#environmentEndpointWebExtension": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnBean (types: org.springframework.boot.actuate.env.EnvironmentEndpoint; SearchStrategy: all) found bean 'environmentEndpoint'; @ConditionalOnMissingBean (types: org.springframework.boot.actuate.env.EnvironmentEndpointWebExtension; SearchStrategy: all) did not find any beans"
          },
          {
            "condition": "OnAvailableEndpointCondition",
            "message": "@ConditionalOnAvailableEndpoint marked as exposed by a 'management.endpoints.web.exposure' property"
          }
        ],
        "HealthContributorAutoConfiguration#pingHealthContributor": [
          {
            "condition": "OnEnabledHealthIndicatorCondition",
            "message": "@ConditionalOnEnabledHealthIndicator management.health.defaults.enabled is considered true"
          }
        ],
        "HealthEndpointAutoConfiguration": [
          {
            "condition": "OnAvailableEndpointCondition",
            "message": "@ConditionalOnAvailableEndpoint marked as exposed by a 'management.endpoints.jmx.exposure' property"
          }
        ],
        "HealthEndpointConfiguration#healthContributorRegistry": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.health.HealthContributorRegistry; SearchStrategy: all) did not find any beans"
          }
        ],
        "HealthEndpointConfiguration#healthEndpoint": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.health.HealthEndpoint; SearchStrategy: all) did not find any beans"
          }
        ],
        "HealthEndpointConfiguration#healthEndpointGroups": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.health.HealthEndpointGroups; SearchStrategy: all) did not find any beans"
          }
        ],
        "HealthEndpointConfiguration#healthHttpCodeStatusMapper": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.health.HttpCodeStatusMapper; SearchStrategy: all) did not find any beans"
          }
        ],
        "HealthEndpointConfiguration#healthStatusAggregator": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.health.StatusAggregator; SearchStrategy: all) did not find any beans"
          }
        ],
        "HealthEndpointWebExtensionConfiguration": [
          {
            "condition": "OnWebApplicationCondition",
            "message": "found 'session' scope"
          },
          {
            "condition": "OnAvailableEndpointCondition",
            "message": "@ConditionalOnAvailableEndpoint marked as exposed by a 'management.endpoints.web.exposure' property"
          },
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnBean (types: org.springframework.boot.actuate.health.HealthEndpoint; SearchStrategy: all) found bean 'healthEndpoint'"
          }
        ],
        "HealthEndpointWebExtensionConfiguration#healthEndpointWebExtension": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.health.HealthEndpointWebExtension; SearchStrategy: all) did not find any beans"
          }
        ],
        "HealthEndpointWebExtensionConfiguration.MvcAdditionalHealthEndpointPathsConfiguration": [
          {
            "condition": "OnAvailableEndpointCondition",
            "message": "@ConditionalOnAvailableEndpoint marked as exposed by a 'management.endpoints.web.exposure' property"
          },
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnBean (types: org.springframework.web.servlet.DispatcherServlet; SearchStrategy: all) found bean 'dispatcherServlet'"
          }
        ],
        "ReactiveHealthEndpointConfiguration": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required class 'reactor.core.publisher.Flux'"
          },
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnBean (types: org.springframework.boot.actuate.health.HealthEndpoint; SearchStrategy: all) found bean 'healthEndpoint'"
          }
        ],
        "ReactiveHealthEndpointConfiguration#reactiveHealthContributorRegistry": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.health.ReactiveHealthContributorRegistry; SearchStrategy: all) did not find any beans"
          }
        ],
        "InfoContributorAutoConfiguration#envInfoContributor": [
          {
            "condition": "OnEnabledInfoContributorCondition",
            "message": "@ConditionalOnEnabledInfoContributor management.info.env.enabled is true"
          }
        ],
        "InfoEndpointAutoConfiguration": [
          {
            "condition": "OnAvailableEndpointCondition",
            "message": "@ConditionalOnAvailableEndpoint marked as exposed by a 'management.endpoints.web.exposure' property"
          }
        ],
        "InfoEndpointAutoConfiguration#infoEndpoint": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.info.InfoEndpoint; SearchStrategy: all) did not find any beans"
          }
        ],
        "IntegrationGraphEndpointAutoConfiguration": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required class 'org.springframework.integration.graph.IntegrationGraphServer'"
          },
          {
            "condition": "OnAvailableEndpointCondition",
            "message": "@ConditionalOnAvailableEndpoint marked as exposed by a 'management.endpoints.web.exposure' property"
          },
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnBean (types: org.springframework.integration.config.IntegrationConfigurationBeanFactoryPostProcessor; SearchStrategy: all) found bean 'integrationConfigurationBeanFactoryPostProcessor'"
          }
        ],
        "IntegrationGraphEndpointAutoConfiguration#integrationGraphEndpoint": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.integration.IntegrationGraphEndpoint; SearchStrategy: all) did not find any beans"
          }
        ],
        "IntegrationGraphEndpointAutoConfiguration#integrationGraphServer": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.integration.graph.IntegrationGraphServer; SearchStrategy: all) did not find any beans"
          }
        ],
        "JmsHealthContributorAutoConfiguration": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required class 'jakarta.jms.ConnectionFactory'"
          },
          {
            "condition": "OnEnabledHealthIndicatorCondition",
            "message": "@ConditionalOnEnabledHealthIndicator management.health.defaults.enabled is considered true"
          },
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnBean (types: jakarta.jms.ConnectionFactory; SearchStrategy: all) found bean 'jmsConnectionFactory'"
          }
        ],
        "JmsHealthContributorAutoConfiguration#jmsHealthContributor": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (names: jmsHealthIndicator,jmsHealthContributor; SearchStrategy: all) did not find any beans"
          }
        ],
        "LogFileWebEndpointAutoConfiguration": [
          {
            "condition": "OnAvailableEndpointCondition",
            "message": "@ConditionalOnAvailableEndpoint marked as exposed by a 'management.endpoints.web.exposure' property"
          }
        ],
        "LogFileWebEndpointAutoConfiguration#logFileWebEndpoint": [
          {
            "condition": "LogFileWebEndpointAutoConfiguration.LogFileCondition",
            "message": "Log File found logging.file.name tacoCloud.log"
          },
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.logging.LogFileWebEndpoint; SearchStrategy: all) did not find any beans"
          }
        ],
        "LoggersEndpointAutoConfiguration": [
          {
            "condition": "OnAvailableEndpointCondition",
            "message": "@ConditionalOnAvailableEndpoint marked as exposed by a 'management.endpoints.web.exposure' property"
          }
        ],
        "LoggersEndpointAutoConfiguration#loggersEndpoint": [
          {
            "condition": "LoggersEndpointAutoConfiguration.OnEnabledLoggingSystemCondition",
            "message": "Logging System enabled"
          },
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnBean (types: org.springframework.boot.logging.LoggingSystem; SearchStrategy: all) found bean 'springBootLoggingSystem'; @ConditionalOnMissingBean (types: org.springframework.boot.actuate.logging.LoggersEndpoint; SearchStrategy: all) did not find any beans"
          }
        ],
        "HeapDumpWebEndpointAutoConfiguration": [
          {
            "condition": "OnAvailableEndpointCondition",
            "message": "@ConditionalOnAvailableEndpoint marked as exposed by a 'management.endpoints.web.exposure' property"
          }
        ],
        "HeapDumpWebEndpointAutoConfiguration#heapDumpWebEndpoint": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.management.HeapDumpWebEndpoint; SearchStrategy: all) did not find any beans"
          }
        ],
        "ThreadDumpEndpointAutoConfiguration": [
          {
            "condition": "OnAvailableEndpointCondition",
            "message": "@ConditionalOnAvailableEndpoint marked as exposed by a 'management.endpoints.web.exposure' property"
          }
        ],
        "ThreadDumpEndpointAutoConfiguration#dumpEndpoint": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.management.ThreadDumpEndpoint; SearchStrategy: all) did not find any beans"
          }
        ],
        "CompositeMeterRegistryAutoConfiguration": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required class 'io.micrometer.core.instrument.composite.CompositeMeterRegistry'"
          }
        ],
        "JvmMetricsAutoConfiguration": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required class 'io.micrometer.core.instrument.MeterRegistry'"
          },
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnBean (types: io.micrometer.core.instrument.MeterRegistry; SearchStrategy: all) found bean 'simpleMeterRegistry'"
          }
        ],
        "JvmMetricsAutoConfiguration#classLoaderMetrics": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: io.micrometer.core.instrument.binder.jvm.ClassLoaderMetrics; SearchStrategy: all) did not find any beans"
          }
        ],
        "JvmMetricsAutoConfiguration#jvmCompilationMetrics": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: io.micrometer.core.instrument.binder.jvm.JvmCompilationMetrics; SearchStrategy: all) did not find any beans"
          }
        ],
        "JvmMetricsAutoConfiguration#jvmGcMetrics": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: io.micrometer.core.instrument.binder.jvm.JvmGcMetrics; SearchStrategy: all) did not find any beans"
          }
        ],
        "JvmMetricsAutoConfiguration#jvmHeapPressureMetrics": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: io.micrometer.core.instrument.binder.jvm.JvmHeapPressureMetrics; SearchStrategy: all) did not find any beans"
          }
        ],
        "JvmMetricsAutoConfiguration#jvmInfoMetrics": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: io.micrometer.core.instrument.binder.jvm.JvmInfoMetrics; SearchStrategy: all) did not find any beans"
          }
        ],
        "JvmMetricsAutoConfiguration#jvmMemoryMetrics": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: io.micrometer.core.instrument.binder.jvm.JvmMemoryMetrics; SearchStrategy: all) did not find any beans"
          }
        ],
        "JvmMetricsAutoConfiguration#jvmThreadMetrics": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: io.micrometer.core.instrument.binder.jvm.JvmThreadMetrics; SearchStrategy: all) did not find any beans"
          }
        ],
        "KafkaMetricsAutoConfiguration": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required classes 'io.micrometer.core.instrument.binder.kafka.KafkaClientMetrics', 'org.springframework.kafka.core.ProducerFactory'"
          },
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnBean (types: io.micrometer.core.instrument.MeterRegistry; SearchStrategy: all) found bean 'simpleMeterRegistry'"
          }
        ],
        "KafkaMetricsAutoConfiguration.KafkaStreamsMetricsConfiguration": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required classes 'io.micrometer.core.instrument.binder.kafka.KafkaStreamsMetrics', 'org.springframework.kafka.config.StreamsBuilderFactoryBean'"
          }
        ],
        "LogbackMetricsAutoConfiguration": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required classes 'io.micrometer.core.instrument.MeterRegistry', 'ch.qos.logback.classic.LoggerContext', 'org.slf4j.LoggerFactory'"
          },
          {
            "condition": "LogbackMetricsAutoConfiguration.LogbackLoggingCondition",
            "message": "LogbackLoggingCondition ILoggerFactory is a Logback LoggerContext"
          },
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnBean (types: io.micrometer.core.instrument.MeterRegistry; SearchStrategy: all) found bean 'simpleMeterRegistry'"
          }
        ],
        "LogbackMetricsAutoConfiguration#logbackMetrics": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: io.micrometer.core.instrument.binder.logging.LogbackMetrics; SearchStrategy: all) did not find any beans"
          }
        ],
        "MetricsAutoConfiguration": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required class 'io.micrometer.core.annotation.Timed'"
          }
        ],
        "MetricsAutoConfiguration#micrometerClock": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: io.micrometer.core.instrument.Clock; SearchStrategy: all) did not find any beans"
          }
        ],
        "MetricsEndpointAutoConfiguration": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required class 'io.micrometer.core.annotation.Timed'"
          },
          {
            "condition": "OnAvailableEndpointCondition",
            "message": "@ConditionalOnAvailableEndpoint marked as exposed by a 'management.endpoints.web.exposure' property"
          }
        ],
        "MetricsEndpointAutoConfiguration#metricsEndpoint": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnBean (types: io.micrometer.core.instrument.MeterRegistry; SearchStrategy: all) found bean 'simpleMeterRegistry'; @ConditionalOnMissingBean (types: org.springframework.boot.actuate.metrics.MetricsEndpoint; SearchStrategy: all) did not find any beans"
          }
        ],
        "SystemMetricsAutoConfiguration": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required class 'io.micrometer.core.instrument.MeterRegistry'"
          },
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnBean (types: io.micrometer.core.instrument.MeterRegistry; SearchStrategy: all) found bean 'simpleMeterRegistry'"
          }
        ],
        "SystemMetricsAutoConfiguration#diskSpaceMetrics": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.metrics.system.DiskSpaceMetricsBinder; SearchStrategy: all) did not find any beans"
          }
        ],
        "SystemMetricsAutoConfiguration#fileDescriptorMetrics": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: io.micrometer.core.instrument.binder.system.FileDescriptorMetrics; SearchStrategy: all) did not find any beans"
          }
        ],
        "SystemMetricsAutoConfiguration#processorMetrics": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: io.micrometer.core.instrument.binder.system.ProcessorMetrics; SearchStrategy: all) did not find any beans"
          }
        ],
        "SystemMetricsAutoConfiguration#uptimeMetrics": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: io.micrometer.core.instrument.binder.system.UptimeMetrics; SearchStrategy: all) did not find any beans"
          }
        ],
        "RabbitMetricsAutoConfiguration": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required classes 'com.rabbitmq.client.ConnectionFactory', 'org.springframework.amqp.rabbit.connection.AbstractConnectionFactory'"
          },
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnBean (types: org.springframework.amqp.rabbit.connection.ConnectionFactory,io.micrometer.core.instrument.MeterRegistry; SearchStrategy: all) found beans 'simpleMeterRegistry', 'rabbitConnectionFactory'"
          }
        ],
        "CacheMeterBinderProvidersConfiguration": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required class 'io.micrometer.core.instrument.binder.MeterBinder'"
          }
        ],
        "RepositoryMetricsAutoConfiguration": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required class 'org.springframework.data.repository.Repository'"
          },
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnBean (types: io.micrometer.core.instrument.MeterRegistry; SearchStrategy: all) found bean 'simpleMeterRegistry'"
          }
        ],
        "RepositoryMetricsAutoConfiguration#metricsRepositoryMethodInvocationListener": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.metrics.data.MetricsRepositoryMethodInvocationListener; SearchStrategy: all) did not find any beans"
          }
        ],
        "RepositoryMetricsAutoConfiguration#repositoryTagsProvider": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.metrics.data.RepositoryTagsProvider; SearchStrategy: all) did not find any beans"
          }
        ],
        "SimpleMetricsExportAutoConfiguration": [
          {
            "condition": "OnMetricsExportEnabledCondition",
            "message": "@ConditionalOnEnabledMetricsExport management.defaults.metrics.export.enabled is considered true"
          },
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnBean (types: io.micrometer.core.instrument.Clock; SearchStrategy: all) found bean 'micrometerClock'; @ConditionalOnMissingBean (types: io.micrometer.core.instrument.MeterRegistry; SearchStrategy: all) did not find any beans"
          }
        ],
        "SimpleMetricsExportAutoConfiguration#simpleConfig": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: io.micrometer.core.instrument.simple.SimpleConfig; SearchStrategy: all) did not find any beans"
          }
        ],
        "MongoMetricsAutoConfiguration": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required class 'com.mongodb.MongoClientSettings'"
          },
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnBean (types: io.micrometer.core.instrument.MeterRegistry; SearchStrategy: all) found bean 'simpleMeterRegistry'"
          }
        ],
        "MongoMetricsAutoConfiguration.MongoCommandMetricsConfiguration": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required class 'io.micrometer.core.instrument.binder.mongodb.MongoMetricsCommandListener'"
          },
          {
            "condition": "OnPropertyCondition",
            "message": "@ConditionalOnProperty (management.metrics.mongo.command.enabled=true) matched"
          }
        ],
        "MongoMetricsAutoConfiguration.MongoCommandMetricsConfiguration#mongoCommandTagsProvider": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: io.micrometer.core.instrument.binder.mongodb.MongoCommandTagsProvider; SearchStrategy: all) did not find any beans"
          }
        ],
        "MongoMetricsAutoConfiguration.MongoCommandMetricsConfiguration#mongoMetricsCommandListener": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: io.micrometer.core.instrument.binder.mongodb.MongoMetricsCommandListener; SearchStrategy: all) did not find any beans"
          }
        ],
        "MongoMetricsAutoConfiguration.MongoConnectionPoolMetricsConfiguration": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required class 'io.micrometer.core.instrument.binder.mongodb.MongoMetricsConnectionPoolListener'"
          },
          {
            "condition": "OnPropertyCondition",
            "message": "@ConditionalOnProperty (management.metrics.mongo.connectionpool.enabled=true) matched"
          }
        ],
        "MongoMetricsAutoConfiguration.MongoConnectionPoolMetricsConfiguration#mongoConnectionPoolTagsProvider": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: io.micrometer.core.instrument.binder.mongodb.MongoConnectionPoolTagsProvider; SearchStrategy: all) did not find any beans"
          }
        ],
        "MongoMetricsAutoConfiguration.MongoConnectionPoolMetricsConfiguration#mongoMetricsConnectionPoolListener": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: io.micrometer.core.instrument.binder.mongodb.MongoMetricsConnectionPoolListener; SearchStrategy: all) did not find any beans"
          }
        ],
        "StartupTimeMetricsListenerAutoConfiguration": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required class 'io.micrometer.core.instrument.MeterRegistry'"
          },
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnBean (types: io.micrometer.core.instrument.MeterRegistry; SearchStrategy: all) found bean 'simpleMeterRegistry'"
          }
        ],
        "StartupTimeMetricsListenerAutoConfiguration#startupTimeMetrics": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.metrics.startup.StartupTimeMetricsListener; SearchStrategy: all) did not find any beans"
          }
        ],
        "TaskExecutorMetricsAutoConfiguration": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required class 'io.micrometer.core.instrument.binder.jvm.ExecutorServiceMetrics'"
          },
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnBean (types: java.util.concurrent.Executor,io.micrometer.core.instrument.MeterRegistry; SearchStrategy: all) found beans 'applicationTaskExecutor', 'simpleMeterRegistry', 'taskScheduler'"
          }
        ],
        "TomcatMetricsAutoConfiguration": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required classes 'io.micrometer.core.instrument.binder.tomcat.TomcatMetrics', 'org.apache.catalina.Manager'"
          },
          {
            "condition": "OnWebApplicationCondition",
            "message": "@ConditionalOnWebApplication (required) found 'session' scope"
          }
        ],
        "TomcatMetricsAutoConfiguration#tomcatMetricsBinder": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnBean (types: io.micrometer.core.instrument.MeterRegistry; SearchStrategy: all) found bean 'simpleMeterRegistry'; @ConditionalOnMissingBean (types: io.micrometer.core.instrument.binder.tomcat.TomcatMetrics,org.springframework.boot.actuate.metrics.web.tomcat.TomcatMetricsBinder; SearchStrategy: all) did not find any beans"
          }
        ],
        "ObservationAutoConfiguration": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required class 'io.micrometer.observation.ObservationRegistry'"
          }
        ],
        "ObservationAutoConfiguration#observationRegistry": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: io.micrometer.observation.ObservationRegistry; SearchStrategy: all) did not find any beans"
          }
        ],
        "ObservationAutoConfiguration.MeterObservationHandlerConfiguration": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnBean (types: io.micrometer.core.instrument.MeterRegistry; SearchStrategy: all) found bean 'simpleMeterRegistry'; @ConditionalOnMissingBean (types: io.micrometer.core.instrument.observation.MeterObservationHandler; SearchStrategy: all) did not find any beans"
          }
        ],
        "ObservationAutoConfiguration.MeterObservationHandlerConfiguration.OnlyMetricsMeterObservationHandlerConfiguration": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: io.micrometer.tracing.Tracer; SearchStrategy: all) did not find any beans"
          }
        ],
        "ObservationAutoConfiguration.OnlyMetricsConfiguration": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required class 'io.micrometer.core.instrument.MeterRegistry'; @ConditionalOnMissingClass did not find unwanted class 'io.micrometer.tracing.Tracer'"
          }
        ],
        "HttpClientObservationsAutoConfiguration": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required class 'io.micrometer.observation.Observation'"
          },
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnBean (types: io.micrometer.observation.ObservationRegistry; SearchStrategy: all) found bean 'observationRegistry'"
          }
        ],
        "HttpClientObservationsAutoConfiguration.MeterFilterConfiguration": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required class 'io.micrometer.core.instrument.MeterRegistry'"
          },
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnBean (types: io.micrometer.core.instrument.MeterRegistry; SearchStrategy: all) found bean 'simpleMeterRegistry'"
          }
        ],
        "RestTemplateObservationConfiguration": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required class 'org.springframework.web.client.RestTemplate'"
          },
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnBean (types: org.springframework.boot.web.client.RestTemplateBuilder; SearchStrategy: all) found bean 'restTemplateBuilder'"
          }
        ],
        "WebClientObservationConfiguration": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required class 'org.springframework.web.reactive.function.client.WebClient'"
          }
        ],
        "WebMvcObservationAutoConfiguration": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required classes 'org.springframework.web.servlet.DispatcherServlet', 'io.micrometer.observation.Observation'"
          },
          {
            "condition": "OnWebApplicationCondition",
            "message": "found 'session' scope"
          },
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnBean (types: io.micrometer.observation.ObservationRegistry; SearchStrategy: all) found bean 'observationRegistry'"
          }
        ],
        "WebMvcObservationAutoConfiguration#webMvcObservationFilter": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.web.filter.ServerHttpObservationFilter; SearchStrategy: all) did not find any beans"
          }
        ],
        "WebMvcObservationAutoConfiguration.MeterFilterConfiguration": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required class 'io.micrometer.core.instrument.MeterRegistry'"
          },
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnBean (types: io.micrometer.core.instrument.MeterRegistry; SearchStrategy: all) found bean 'simpleMeterRegistry'"
          }
        ],
        "ScheduledTasksEndpointAutoConfiguration": [
          {
            "condition": "OnAvailableEndpointCondition",
            "message": "@ConditionalOnAvailableEndpoint marked as exposed by a 'management.endpoints.web.exposure' property"
          }
        ],
        "ScheduledTasksEndpointAutoConfiguration#scheduledTasksEndpoint": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.scheduling.ScheduledTasksEndpoint; SearchStrategy: all) did not find any beans"
          }
        ],
        "SecurityRequestMatchersManagementContextConfiguration": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required class 'org.springframework.security.web.util.matcher.RequestMatcher'"
          },
          {
            "condition": "OnWebApplicationCondition",
            "message": "found 'session' scope"
          }
        ],
        "SecurityRequestMatchersManagementContextConfiguration.MvcRequestMatcherConfiguration": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required class 'org.springframework.web.servlet.DispatcherServlet'"
          },
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnBean (types: org.springframework.boot.autoconfigure.web.servlet.DispatcherServletPath; SearchStrategy: all) found bean 'dispatcherServletRegistration'"
          }
        ],
        "SecurityRequestMatchersManagementContextConfiguration.MvcRequestMatcherConfiguration#requestMatcherProvider": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required class 'org.springframework.web.servlet.DispatcherServlet'"
          },
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.boot.autoconfigure.security.servlet.RequestMatcherProvider; SearchStrategy: all) did not find any beans"
          }
        ],
        "DiskSpaceHealthContributorAutoConfiguration": [
          {
            "condition": "OnEnabledHealthIndicatorCondition",
            "message": "@ConditionalOnEnabledHealthIndicator management.health.defaults.enabled is considered true"
          }
        ],
        "DiskSpaceHealthContributorAutoConfiguration#diskSpaceHealthIndicator": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (names: diskSpaceHealthIndicator; SearchStrategy: all) did not find any beans"
          }
        ],
        "HttpExchangesEndpointAutoConfiguration": [
          {
            "condition": "OnAvailableEndpointCondition",
            "message": "@ConditionalOnAvailableEndpoint marked as exposed by a 'management.endpoints.web.exposure' property"
          }
        ],
        "MappingsEndpointAutoConfiguration": [
          {
            "condition": "OnAvailableEndpointCondition",
            "message": "@ConditionalOnAvailableEndpoint marked as exposed by a 'management.endpoints.web.exposure' property"
          }
        ],
        "MappingsEndpointAutoConfiguration.ServletWebConfiguration": [
          {
            "condition": "OnWebApplicationCondition",
            "message": "found 'session' scope"
          }
        ],
        "MappingsEndpointAutoConfiguration.ServletWebConfiguration.SpringMvcConfiguration": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required class 'org.springframework.web.servlet.DispatcherServlet'"
          },
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnBean (types: org.springframework.web.servlet.DispatcherServlet; SearchStrategy: all) found bean 'dispatcherServlet'"
          }
        ],
        "ManagementContextAutoConfiguration.SameManagementContextConfiguration": [
          {
            "condition": "OnManagementPortCondition",
            "message": "Management Port actual port type (SAME) matched required type"
          }
        ],
        "ServletManagementContextAutoConfiguration": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required class 'jakarta.servlet.Servlet'"
          },
          {
            "condition": "OnWebApplicationCondition",
            "message": "found 'session' scope"
          }
        ],
        "SpringApplicationAdminJmxAutoConfiguration": [
          {
            "condition": "OnPropertyCondition",
            "message": "@ConditionalOnProperty (spring.application.admin.enabled=true) matched"
          }
        ],
        "SpringApplicationAdminJmxAutoConfiguration#springApplicationAdminRegistrar": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.boot.admin.SpringApplicationAdminMXBeanRegistrar; SearchStrategy: all) did not find any beans"
          }
        ],
        "RabbitAnnotationDrivenConfiguration": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required class 'org.springframework.amqp.rabbit.annotation.EnableRabbit'"
          }
        ],
        "RabbitAnnotationDrivenConfiguration#directRabbitListenerContainerFactoryConfigurer": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.boot.autoconfigure.amqp.DirectRabbitListenerContainerFactoryConfigurer; SearchStrategy: all) did not find any beans"
          }
        ],
        "RabbitAnnotationDrivenConfiguration#simpleRabbitListenerContainerFactory": [
          {
            "condition": "OnPropertyCondition",
            "message": "@ConditionalOnProperty (spring.rabbitmq.listener.type=simple) matched"
          },
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (names: rabbitListenerContainerFactory; SearchStrategy: all) did not find any beans"
          }
        ],
        "RabbitAnnotationDrivenConfiguration#simpleRabbitListenerContainerFactoryConfigurer": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.boot.autoconfigure.amqp.SimpleRabbitListenerContainerFactoryConfigurer; SearchStrategy: all) did not find any beans"
          }
        ],
        "RabbitAnnotationDrivenConfiguration.EnableRabbitConfiguration": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (names: org.springframework.amqp.rabbit.config.internalRabbitListenerAnnotationProcessor; SearchStrategy: all) did not find any beans"
          }
        ],
        "RabbitAutoConfiguration": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required classes 'org.springframework.amqp.rabbit.core.RabbitTemplate', 'com.rabbitmq.client.Channel'"
          }
        ],
        "RabbitAutoConfiguration.MessagingTemplateConfiguration": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required class 'org.springframework.amqp.rabbit.core.RabbitMessagingTemplate'"
          },
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.amqp.rabbit.core.RabbitMessagingTemplate; SearchStrategy: all) did not find any beans"
          }
        ],
        "RabbitAutoConfiguration.MessagingTemplateConfiguration#rabbitMessagingTemplate": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnSingleCandidate (types: org.springframework.amqp.rabbit.core.RabbitTemplate; SearchStrategy: all) found a single bean 'rabbitTemplate'"
          }
        ],
        "RabbitAutoConfiguration.RabbitConnectionFactoryCreator#rabbitConnectionFactory": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.amqp.rabbit.connection.ConnectionFactory; SearchStrategy: all) did not find any beans"
          }
        ],
        "RabbitAutoConfiguration.RabbitConnectionFactoryCreator#rabbitConnectionFactoryBeanConfigurer": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.boot.autoconfigure.amqp.RabbitConnectionFactoryBeanConfigurer; SearchStrategy: all) did not find any beans"
          }
        ],
        "RabbitAutoConfiguration.RabbitConnectionFactoryCreator#rabbitConnectionFactoryConfigurer": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.boot.autoconfigure.amqp.CachingConnectionFactoryConfigurer; SearchStrategy: all) did not find any beans"
          }
        ],
        "RabbitAutoConfiguration.RabbitTemplateConfiguration#amqpAdmin": [
          {
            "condition": "OnPropertyCondition",
            "message": "@ConditionalOnProperty (spring.rabbitmq.dynamic) matched"
          },
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnSingleCandidate (types: org.springframework.amqp.rabbit.connection.ConnectionFactory; SearchStrategy: all) found a single bean 'rabbitConnectionFactory'; @ConditionalOnMissingBean (types: org.springframework.amqp.core.AmqpAdmin; SearchStrategy: all) did not find any beans"
          }
        ],
        "RabbitAutoConfiguration.RabbitTemplateConfiguration#rabbitTemplate": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnSingleCandidate (types: org.springframework.amqp.rabbit.connection.ConnectionFactory; SearchStrategy: all) found a single bean 'rabbitConnectionFactory'; @ConditionalOnMissingBean (types: org.springframework.amqp.rabbit.core.RabbitOperations; SearchStrategy: all) did not find any beans"
          }
        ],
        "RabbitAutoConfiguration.RabbitTemplateConfiguration#rabbitTemplateConfigurer": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.boot.autoconfigure.amqp.RabbitTemplateConfigurer; SearchStrategy: all) did not find any beans"
          }
        ],
        "AopAutoConfiguration": [
          {
            "condition": "OnPropertyCondition",
            "message": "@ConditionalOnProperty (spring.aop.auto=true) matched"
          }
        ],
        "AopAutoConfiguration.AspectJAutoProxyingConfiguration": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required class 'org.aspectj.weaver.Advice'"
          }
        ],
        "AopAutoConfiguration.AspectJAutoProxyingConfiguration.CglibAutoProxyConfiguration": [
          {
            "condition": "OnPropertyCondition",
            "message": "@ConditionalOnProperty (spring.aop.proxy-target-class=true) matched"
          }
        ],
        "GenericCacheConfiguration": [
          {
            "condition": "CacheCondition",
            "message": "Cache org.springframework.boot.autoconfigure.cache.GenericCacheConfiguration automatic cache type"
          }
        ],
        "NoOpCacheConfiguration": [
          {
            "condition": "CacheCondition",
            "message": "Cache org.springframework.boot.autoconfigure.cache.NoOpCacheConfiguration automatic cache type"
          }
        ],
        "SimpleCacheConfiguration": [
          {
            "condition": "CacheCondition",
            "message": "Cache org.springframework.boot.autoconfigure.cache.SimpleCacheConfiguration automatic cache type"
          }
        ],
        "LifecycleAutoConfiguration#defaultLifecycleProcessor": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (names: lifecycleProcessor; SearchStrategy: current) did not find any beans"
          }
        ],
        "PropertyPlaceholderAutoConfiguration#propertySourcesPlaceholderConfigurer": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.context.support.PropertySourcesPlaceholderConfigurer; SearchStrategy: current) did not find any beans"
          }
        ],
        "PersistenceExceptionTranslationAutoConfiguration": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required class 'org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor'"
          }
        ],
        "PersistenceExceptionTranslationAutoConfiguration#persistenceExceptionTranslationPostProcessor": [
          {
            "condition": "OnPropertyCondition",
            "message": "@ConditionalOnProperty (spring.dao.exceptiontranslation.enabled) matched"
          },
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor; SearchStrategy: all) did not find any beans"
          }
        ],
        "MongoDataAutoConfiguration": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required classes 'com.mongodb.client.MongoClient', 'org.springframework.data.mongodb.core.MongoTemplate'"
          }
        ],
        "MongoDataConfiguration#mongoCustomConversions": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.data.mongodb.core.convert.MongoCustomConversions; SearchStrategy: all) did not find any beans"
          }
        ],
        "MongoDataConfiguration#mongoManagedTypes": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.data.mongodb.MongoManagedTypes; SearchStrategy: all) did not find any beans"
          }
        ],
        "MongoDataConfiguration#mongoMappingContext": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.data.mongodb.core.mapping.MongoMappingContext; SearchStrategy: all) did not find any beans"
          }
        ],
        "MongoDatabaseFactoryConfiguration": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnSingleCandidate (types: com.mongodb.client.MongoClient; SearchStrategy: all) found a single bean 'mongo'; @ConditionalOnMissingBean (types: org.springframework.data.mongodb.MongoDatabaseFactory; SearchStrategy: all) did not find any beans"
          }
        ],
        "MongoDatabaseFactoryDependentConfiguration": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnBean (types: org.springframework.data.mongodb.MongoDatabaseFactory; SearchStrategy: all) found bean 'mongoDatabaseFactory'"
          }
        ],
        "MongoDatabaseFactoryDependentConfiguration#gridFsTemplate": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.data.mongodb.gridfs.GridFsOperations; SearchStrategy: all) did not find any beans"
          }
        ],
        "MongoDatabaseFactoryDependentConfiguration#mappingMongoConverter": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.data.mongodb.core.convert.MongoConverter; SearchStrategy: all) did not find any beans"
          }
        ],
        "MongoDatabaseFactoryDependentConfiguration#mongoTemplate": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.data.mongodb.core.MongoOperations; SearchStrategy: all) did not find any beans"
          }
        ],
        "MongoReactiveDataAutoConfiguration": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required classes 'com.mongodb.reactivestreams.client.MongoClient', 'org.springframework.data.mongodb.core.ReactiveMongoTemplate'"
          },
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnBean (types: com.mongodb.reactivestreams.client.MongoClient; SearchStrategy: all) found bean 'reactiveStreamsMongoClient'"
          }
        ],
        "MongoReactiveDataAutoConfiguration#dataBufferFactory": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.core.io.buffer.DataBufferFactory; SearchStrategy: all) did not find any beans"
          }
        ],
        "MongoReactiveDataAutoConfiguration#reactiveGridFsTemplate": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.data.mongodb.gridfs.ReactiveGridFsOperations; SearchStrategy: all) did not find any beans"
          }
        ],
        "MongoReactiveDataAutoConfiguration#reactiveMongoDatabaseFactory": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.data.mongodb.ReactiveMongoDatabaseFactory; SearchStrategy: all) did not find any beans"
          }
        ],
        "MongoReactiveDataAutoConfiguration#reactiveMongoTemplate": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.data.mongodb.core.ReactiveMongoOperations; SearchStrategy: all) did not find any beans"
          }
        ],
        "MongoReactiveRepositoriesAutoConfiguration": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required classes 'com.mongodb.reactivestreams.client.MongoClient', 'org.springframework.data.mongodb.repository.ReactiveMongoRepository'"
          },
          {
            "condition": "OnRepositoryTypeCondition",
            "message": "@ConditionalOnRepositoryType configured type of 'AUTO' matched required type"
          },
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.data.mongodb.repository.support.ReactiveMongoRepositoryFactoryBean,org.springframework.data.mongodb.repository.config.ReactiveMongoRepositoryConfigurationExtension; SearchStrategy: all) did not find any beans"
          }
        ],
        "MongoRepositoriesAutoConfiguration": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required classes 'com.mongodb.client.MongoClient', 'org.springframework.data.mongodb.repository.MongoRepository'"
          },
          {
            "condition": "OnRepositoryTypeCondition",
            "message": "@ConditionalOnRepositoryType configured type of 'AUTO' matched required type"
          },
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.data.mongodb.repository.support.MongoRepositoryFactoryBean,org.springframework.data.mongodb.repository.config.MongoRepositoryConfigurationExtension; SearchStrategy: all) did not find any beans"
          }
        ],
        "RepositoryRestMvcAutoConfiguration": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required class 'org.springframework.data.rest.webmvc.config.RepositoryRestMvcConfiguration'"
          },
          {
            "condition": "OnWebApplicationCondition",
            "message": "found 'session' scope"
          },
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.data.rest.webmvc.config.RepositoryRestMvcConfiguration; SearchStrategy: all) did not find any beans"
          }
        ],
        "HypermediaAutoConfiguration": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required classes 'org.springframework.hateoas.EntityModel', 'org.springframework.web.bind.annotation.RequestMapping', 'org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter', 'org.springframework.plugin.core.Plugin'"
          },
          {
            "condition": "OnWebApplicationCondition",
            "message": "@ConditionalOnWebApplication (required) found 'session' scope"
          }
        ],
        "HypermediaAutoConfiguration#applicationJsonHalConfiguration": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required class 'com.fasterxml.jackson.databind.ObjectMapper'"
          },
          {
            "condition": "OnPropertyCondition",
            "message": "@ConditionalOnProperty (spring.hateoas.use-hal-as-default-json-media-type) matched"
          },
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.hateoas.mediatype.hal.HalConfiguration; SearchStrategy: all) did not find any beans"
          }
        ],
        "HttpMessageConvertersAutoConfiguration": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required class 'org.springframework.http.converter.HttpMessageConverter'"
          },
          {
            "condition": "HttpMessageConvertersAutoConfiguration.NotReactiveWebApplicationCondition",
            "message": "NoneNestedConditions 0 matched 1 did not; NestedCondition on HttpMessageConvertersAutoConfiguration.NotReactiveWebApplicationCondition.ReactiveWebApplication not a reactive web application"
          }
        ],
        "HttpMessageConvertersAutoConfiguration#messageConverters": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.boot.autoconfigure.http.HttpMessageConverters; SearchStrategy: all) did not find any beans"
          }
        ],
        "HttpMessageConvertersAutoConfiguration.StringHttpMessageConverterConfiguration": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required class 'org.springframework.http.converter.StringHttpMessageConverter'"
          }
        ],
        "HttpMessageConvertersAutoConfiguration.StringHttpMessageConverterConfiguration#stringHttpMessageConverter": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.http.converter.StringHttpMessageConverter; SearchStrategy: all) did not find any beans"
          }
        ],
        "JacksonHttpMessageConvertersConfiguration.MappingJackson2HttpMessageConverterConfiguration": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required class 'com.fasterxml.jackson.databind.ObjectMapper'"
          },
          {
            "condition": "OnPropertyCondition",
            "message": "@ConditionalOnProperty (spring.mvc.converters.preferred-json-mapper=jackson) matched"
          },
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnBean (types: com.fasterxml.jackson.databind.ObjectMapper; SearchStrategy: all) found bean 'jacksonObjectMapper'"
          }
        ],
        "JacksonHttpMessageConvertersConfiguration.MappingJackson2HttpMessageConverterConfiguration#mappingJackson2HttpMessageConverter": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.http.converter.json.MappingJackson2HttpMessageConverter ignored: org.springframework.hateoas.server.mvc.TypeConstrainedMappingJackson2HttpMessageConverter,org.springframework.data.rest.webmvc.alps.AlpsJsonHttpMessageConverter; SearchStrategy: all) did not find any beans"
          }
        ],
        "CodecsAutoConfiguration": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required classes 'org.springframework.http.codec.CodecConfigurer', 'org.springframework.web.reactive.function.client.WebClient'"
          }
        ],
        "CodecsAutoConfiguration.JacksonCodecConfiguration": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required class 'com.fasterxml.jackson.databind.ObjectMapper'"
          }
        ],
        "CodecsAutoConfiguration.JacksonCodecConfiguration#jacksonCodecCustomizer": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnBean (types: com.fasterxml.jackson.databind.ObjectMapper; SearchStrategy: all) found bean 'jacksonObjectMapper'"
          }
        ],
        "IntegrationAutoConfiguration": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required class 'org.springframework.integration.config.EnableIntegration'"
          }
        ],
        "IntegrationAutoConfiguration#integrationGlobalProperties": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (names: integrationGlobalProperties; SearchStrategy: all) did not find any beans"
          }
        ],
        "IntegrationAutoConfiguration.IntegrationComponentScanConfiguration": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.integration.config.IntegrationComponentScanRegistrar; SearchStrategy: all) did not find any beans"
          }
        ],
        "IntegrationAutoConfiguration.IntegrationConfiguration#defaultPollerMetadata": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (names: org.springframework.integration.context.defaultPollerMetadata; SearchStrategy: all) did not find any beans"
          }
        ],
        "IntegrationAutoConfiguration.IntegrationManagementConfiguration": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required class 'org.springframework.integration.config.EnableIntegrationManagement'"
          },
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (names: integrationManagementConfigurer types: org.springframework.integration.config.IntegrationManagementConfigurer; SearchStrategy: current) did not find any beans"
          }
        ],
        "IntegrationAutoConfiguration.IntegrationTaskSchedulerConfiguration": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnBean (types: org.springframework.boot.task.TaskSchedulerBuilder; SearchStrategy: all) found bean 'taskSchedulerBuilder'; @ConditionalOnMissingBean (names: taskScheduler; SearchStrategy: all) did not find any beans"
          }
        ],
        "JacksonAutoConfiguration": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required class 'com.fasterxml.jackson.databind.ObjectMapper'"
          }
        ],
        "JacksonAutoConfiguration.Jackson2ObjectMapperBuilderCustomizerConfiguration": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required class 'org.springframework.http.converter.json.Jackson2ObjectMapperBuilder'"
          }
        ],
        "JacksonAutoConfiguration.JacksonObjectMapperBuilderConfiguration": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required class 'org.springframework.http.converter.json.Jackson2ObjectMapperBuilder'"
          }
        ],
        "JacksonAutoConfiguration.JacksonObjectMapperBuilderConfiguration#jacksonObjectMapperBuilder": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.http.converter.json.Jackson2ObjectMapperBuilder; SearchStrategy: all) did not find any beans"
          }
        ],
        "JacksonAutoConfiguration.JacksonObjectMapperConfiguration": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required class 'org.springframework.http.converter.json.Jackson2ObjectMapperBuilder'"
          }
        ],
        "JacksonAutoConfiguration.JacksonObjectMapperConfiguration#jacksonObjectMapper": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: com.fasterxml.jackson.databind.ObjectMapper; SearchStrategy: all) did not find any beans"
          }
        ],
        "JacksonAutoConfiguration.ParameterNamesModuleConfiguration": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required class 'com.fasterxml.jackson.module.paramnames.ParameterNamesModule'"
          }
        ],
        "JacksonAutoConfiguration.ParameterNamesModuleConfiguration#parameterNamesModule": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: com.fasterxml.jackson.module.paramnames.ParameterNamesModule; SearchStrategy: all) did not find any beans"
          }
        ],
        "JmsAnnotationDrivenConfiguration": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required class 'org.springframework.jms.annotation.EnableJms'"
          }
        ],
        "JmsAnnotationDrivenConfiguration#jmsListenerContainerFactory": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnSingleCandidate (types: jakarta.jms.ConnectionFactory; SearchStrategy: all) found a single bean 'jmsConnectionFactory'; @ConditionalOnMissingBean (names: jmsListenerContainerFactory; SearchStrategy: all) did not find any beans"
          }
        ],
        "JmsAnnotationDrivenConfiguration#jmsListenerContainerFactoryConfigurer": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.boot.autoconfigure.jms.DefaultJmsListenerContainerFactoryConfigurer; SearchStrategy: all) did not find any beans"
          }
        ],
        "JmsAnnotationDrivenConfiguration.EnableJmsConfiguration": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (names: org.springframework.jms.config.internalJmsListenerAnnotationProcessor; SearchStrategy: all) did not find any beans"
          }
        ],
        "JmsAutoConfiguration": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required classes 'jakarta.jms.Message', 'org.springframework.jms.core.JmsTemplate'"
          },
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnBean (types: jakarta.jms.ConnectionFactory; SearchStrategy: all) found bean 'jmsConnectionFactory'"
          }
        ],
        "JmsAutoConfiguration.JmsTemplateConfiguration#jmsTemplate": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnSingleCandidate (types: jakarta.jms.ConnectionFactory; SearchStrategy: all) found a single bean 'jmsConnectionFactory'; @ConditionalOnMissingBean (types: org.springframework.jms.core.JmsOperations; SearchStrategy: all) did not find any beans"
          }
        ],
        "JmsAutoConfiguration.MessagingTemplateConfiguration": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required class 'org.springframework.jms.core.JmsMessagingTemplate'"
          }
        ],
        "JmsAutoConfiguration.MessagingTemplateConfiguration#jmsMessagingTemplate": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnSingleCandidate (types: org.springframework.jms.core.JmsTemplate; SearchStrategy: all) found a single bean 'jmsTemplate'; @ConditionalOnMissingBean (types: org.springframework.jms.core.JmsMessageOperations; SearchStrategy: all) did not find any beans"
          }
        ],
        "ArtemisAutoConfiguration": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required classes 'jakarta.jms.ConnectionFactory', 'org.apache.activemq.artemis.jms.client.ActiveMQConnectionFactory'"
          },
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: jakarta.jms.ConnectionFactory; SearchStrategy: all) did not find any beans"
          }
        ],
        "ArtemisConnectionFactoryConfiguration": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: jakarta.jms.ConnectionFactory; SearchStrategy: all) did not find any beans"
          }
        ],
        "ArtemisConnectionFactoryConfiguration.SimpleConnectionFactoryConfiguration": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required class 'org.springframework.jms.connection.CachingConnectionFactory'"
          },
          {
            "condition": "OnPropertyCondition",
            "message": "@ConditionalOnProperty (spring.artemis.pool.enabled=false) matched"
          }
        ],
        "ArtemisConnectionFactoryConfiguration.SimpleConnectionFactoryConfiguration#cachingJmsConnectionFactory": [
          {
            "condition": "OnPropertyCondition",
            "message": "@ConditionalOnProperty (spring.jms.cache.enabled=true) matched"
          }
        ],
        "JmxAutoConfiguration": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required class 'org.springframework.jmx.export.MBeanExporter'"
          },
          {
            "condition": "OnPropertyCondition",
            "message": "@ConditionalOnProperty (spring.jmx.enabled=true) matched"
          }
        ],
        "JmxAutoConfiguration#mbeanExporter": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.jmx.export.MBeanExporter; SearchStrategy: current) did not find any beans"
          }
        ],
        "JmxAutoConfiguration#mbeanServer": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: javax.management.MBeanServer; SearchStrategy: all) did not find any beans"
          }
        ],
        "JmxAutoConfiguration#objectNamingStrategy": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.jmx.export.naming.ObjectNamingStrategy; SearchStrategy: current) did not find any beans"
          }
        ],
        "KafkaAnnotationDrivenConfiguration": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required class 'org.springframework.kafka.annotation.EnableKafka'"
          }
        ],
        "KafkaAnnotationDrivenConfiguration#kafkaListenerContainerFactory": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (names: kafkaListenerContainerFactory; SearchStrategy: all) did not find any beans"
          }
        ],
        "KafkaAnnotationDrivenConfiguration#kafkaListenerContainerFactoryConfigurer": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.boot.autoconfigure.kafka.ConcurrentKafkaListenerContainerFactoryConfigurer; SearchStrategy: all) did not find any beans"
          }
        ],
        "KafkaAnnotationDrivenConfiguration.EnableKafkaConfiguration": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (names: org.springframework.kafka.config.internalKafkaListenerAnnotationProcessor; SearchStrategy: all) did not find any beans"
          }
        ],
        "KafkaAutoConfiguration": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required class 'org.springframework.kafka.core.KafkaTemplate'"
          }
        ],
        "KafkaAutoConfiguration#kafkaAdmin": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.kafka.core.KafkaAdmin; SearchStrategy: all) did not find any beans"
          }
        ],
        "KafkaAutoConfiguration#kafkaConsumerFactory": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.kafka.core.ConsumerFactory; SearchStrategy: all) did not find any beans"
          }
        ],
        "KafkaAutoConfiguration#kafkaProducerFactory": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.kafka.core.ProducerFactory; SearchStrategy: all) did not find any beans"
          }
        ],
        "KafkaAutoConfiguration#kafkaProducerListener": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.kafka.support.ProducerListener; SearchStrategy: all) did not find any beans"
          }
        ],
        "KafkaAutoConfiguration#kafkaTemplate": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.kafka.core.KafkaTemplate; SearchStrategy: all) did not find any beans"
          }
        ],
        "MongoAutoConfiguration": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required class 'com.mongodb.client.MongoClient'"
          },
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.data.mongodb.MongoDatabaseFactory; SearchStrategy: all) did not find any beans"
          }
        ],
        "MongoAutoConfiguration#mongo": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: com.mongodb.client.MongoClient; SearchStrategy: all) did not find any beans"
          }
        ],
        "MongoAutoConfiguration.MongoClientSettingsConfiguration": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: com.mongodb.MongoClientSettings; SearchStrategy: all) did not find any beans"
          }
        ],
        "MongoReactiveAutoConfiguration": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required classes 'com.mongodb.reactivestreams.client.MongoClient', 'reactor.core.publisher.Flux'"
          }
        ],
        "MongoReactiveAutoConfiguration#reactiveStreamsMongoClient": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: com.mongodb.reactivestreams.client.MongoClient; SearchStrategy: all) did not find any beans"
          }
        ],
        "MongoReactiveAutoConfiguration.NettyDriverConfiguration": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required classes 'io.netty.channel.socket.SocketChannel', 'io.netty.channel.nio.NioEventLoopGroup'"
          }
        ],
        "NettyAutoConfiguration": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required class 'io.netty.util.NettyRuntime'"
          }
        ],
        "RSocketMessagingAutoConfiguration": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required classes 'org.springframework.messaging.rsocket.RSocketRequester', 'io.rsocket.RSocket', 'io.rsocket.transport.netty.server.TcpServerTransport'"
          }
        ],
        "RSocketMessagingAutoConfiguration#messageHandler": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.messaging.rsocket.annotation.support.RSocketMessageHandler; SearchStrategy: all) did not find any beans"
          }
        ],
        "RSocketRequesterAutoConfiguration": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required classes 'org.springframework.messaging.rsocket.RSocketRequester', 'io.rsocket.RSocket', 'reactor.netty.http.server.HttpServer', 'io.rsocket.transport.netty.server.TcpServerTransport'"
          }
        ],
        "RSocketRequesterAutoConfiguration#rSocketRequesterBuilder": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.messaging.rsocket.RSocketRequester$Builder; SearchStrategy: all) did not find any beans"
          }
        ],
        "RSocketServerAutoConfiguration": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required classes 'io.rsocket.core.RSocketServer', 'org.springframework.messaging.rsocket.RSocketStrategies', 'reactor.netty.http.server.HttpServer', 'io.rsocket.transport.netty.server.TcpServerTransport'"
          },
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnBean (types: org.springframework.messaging.rsocket.annotation.support.RSocketMessageHandler; SearchStrategy: all) found bean 'messageHandler'"
          }
        ],
        "RSocketServerAutoConfiguration.EmbeddedServerConfiguration": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required class 'org.springframework.http.client.reactive.ReactorResourceFactory'"
          },
          {
            "condition": "OnPropertyCondition",
            "message": "@ConditionalOnProperty (spring.rsocket.server.port) matched"
          }
        ],
        "RSocketServerAutoConfiguration.EmbeddedServerConfiguration#rSocketServerBootstrap": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.boot.rsocket.context.RSocketServerBootstrap; SearchStrategy: all) did not find any beans"
          }
        ],
        "RSocketServerAutoConfiguration.EmbeddedServerConfiguration#rSocketServerFactory": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.boot.rsocket.server.RSocketServerFactory; SearchStrategy: all) did not find any beans"
          }
        ],
        "RSocketStrategiesAutoConfiguration": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required classes 'io.rsocket.RSocket', 'org.springframework.messaging.rsocket.RSocketStrategies', 'io.netty.buffer.PooledByteBufAllocator'"
          }
        ],
        "RSocketStrategiesAutoConfiguration#rSocketStrategies": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.messaging.rsocket.RSocketStrategies; SearchStrategy: all) did not find any beans"
          }
        ],
        "RSocketStrategiesAutoConfiguration.JacksonCborStrategyConfiguration": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required classes 'com.fasterxml.jackson.databind.ObjectMapper', 'com.fasterxml.jackson.dataformat.cbor.CBORFactory'"
          }
        ],
        "RSocketStrategiesAutoConfiguration.JacksonCborStrategyConfiguration#jacksonCborRSocketStrategyCustomizer": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnBean (types: org.springframework.http.converter.json.Jackson2ObjectMapperBuilder; SearchStrategy: all) found bean 'jacksonObjectMapperBuilder'"
          }
        ],
        "RSocketStrategiesAutoConfiguration.JacksonJsonStrategyConfiguration": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required class 'com.fasterxml.jackson.databind.ObjectMapper'"
          }
        ],
        "RSocketStrategiesAutoConfiguration.JacksonJsonStrategyConfiguration#jacksonJsonRSocketStrategyCustomizer": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnBean (types: com.fasterxml.jackson.databind.ObjectMapper; SearchStrategy: all) found bean 'jacksonObjectMapper'"
          }
        ],
        "OAuth2ClientAutoConfiguration": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required classes 'org.springframework.security.config.annotation.web.configuration.EnableWebSecurity', 'org.springframework.security.oauth2.client.registration.ClientRegistration'"
          },
          {
            "condition": "OnWebApplicationCondition",
            "message": "found 'session' scope"
          }
        ],
        "OAuth2ClientRegistrationRepositoryConfiguration": [
          {
            "condition": "ClientsConfiguredCondition",
            "message": "OAuth2 Clients Configured Condition found registered clients taco-admin-client"
          }
        ],
        "OAuth2ClientRegistrationRepositoryConfiguration#clientRegistrationRepository": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.security.oauth2.client.registration.ClientRegistrationRepository; SearchStrategy: all) did not find any beans"
          }
        ],
        "OAuth2WebSecurityConfiguration": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnBean (types: org.springframework.security.oauth2.client.registration.ClientRegistrationRepository; SearchStrategy: all) found bean 'clientRegistrationRepository'"
          }
        ],
        "OAuth2WebSecurityConfiguration#authorizedClientRepository": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.security.oauth2.client.web.OAuth2AuthorizedClientRepository; SearchStrategy: all) did not find any beans"
          }
        ],
        "OAuth2WebSecurityConfiguration#authorizedClientService": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.security.oauth2.client.OAuth2AuthorizedClientService; SearchStrategy: all) did not find any beans"
          }
        ],
        "OAuth2ResourceServerAutoConfiguration": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required class 'org.springframework.security.oauth2.server.resource.authentication.BearerTokenAuthenticationToken'"
          },
          {
            "condition": "OnWebApplicationCondition",
            "message": "found 'session' scope"
          }
        ],
        "OAuth2ResourceServerJwtConfiguration.JwtDecoderConfiguration": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.security.oauth2.jwt.JwtDecoder; SearchStrategy: all) did not find any beans"
          }
        ],
        "OAuth2ResourceServerJwtConfiguration.JwtDecoderConfiguration#jwtDecoderByJwkKeySetUri": [
          {
            "condition": "OnPropertyCondition",
            "message": "@ConditionalOnProperty (spring.security.oauth2.resourceserver.jwt.jwk-set-uri) matched"
          }
        ],
        "OAuth2ResourceServerOpaqueTokenConfiguration.OpaqueTokenIntrospectionClientConfiguration": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.security.oauth2.server.resource.introspection.OpaqueTokenIntrospector; SearchStrategy: all) did not find any beans"
          }
        ],
        "Oauth2ResourceServerConfiguration.JwtConfiguration": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required class 'org.springframework.security.oauth2.jwt.JwtDecoder'"
          }
        ],
        "ReactiveSecurityAutoConfiguration": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required classes 'reactor.core.publisher.Flux', 'org.springframework.security.config.annotation.web.reactive.EnableWebFluxSecurity', 'org.springframework.security.web.server.WebFilterChainProxy', 'org.springframework.web.reactive.config.WebFluxConfigurer'"
          }
        ],
        "ReactiveUserDetailsServiceAutoConfiguration": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required class 'org.springframework.security.authentication.ReactiveAuthenticationManager'"
          },
          {
            "condition": "ReactiveUserDetailsServiceAutoConfiguration.ReactiveUserDetailsServiceCondition",
            "message": "AnyNestedCondition 1 matched 1 did not; NestedCondition on ReactiveUserDetailsServiceAutoConfiguration.ReactiveUserDetailsServiceCondition.ReactiveWebApplicationCondition not a reactive web application; NestedCondition on ReactiveUserDetailsServiceAutoConfiguration.ReactiveUserDetailsServiceCondition.RSocketSecurityEnabledCondition @ConditionalOnBean (types: org.springframework.messaging.rsocket.annotation.support.RSocketMessageHandler; SearchStrategy: all) found bean 'messageHandler'"
          },
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.security.authentication.ReactiveAuthenticationManager,org.springframework.security.core.userdetails.ReactiveUserDetailsService,org.springframework.security.authentication.ReactiveAuthenticationManagerResolver,org.springframework.security.oauth2.jwt.ReactiveJwtDecoder,org.springframework.security.oauth2.server.resource.introspection.ReactiveOpaqueTokenIntrospector; SearchStrategy: all) did not find any beans"
          }
        ],
        "SecurityAutoConfiguration": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required class 'org.springframework.security.authentication.DefaultAuthenticationEventPublisher'"
          }
        ],
        "SecurityAutoConfiguration#authenticationEventPublisher": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.security.authentication.AuthenticationEventPublisher; SearchStrategy: all) did not find any beans"
          }
        ],
        "SecurityFilterAutoConfiguration": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required classes 'org.springframework.security.web.context.AbstractSecurityWebApplicationInitializer', 'org.springframework.security.config.http.SessionCreationPolicy'"
          },
          {
            "condition": "OnWebApplicationCondition",
            "message": "found 'session' scope"
          }
        ],
        "SecurityFilterAutoConfiguration#securityFilterChainRegistration": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnBean (names: springSecurityFilterChain; SearchStrategy: all) found bean 'springSecurityFilterChain'"
          }
        ],
        "SpringBootWebSecurityConfiguration": [
          {
            "condition": "OnWebApplicationCondition",
            "message": "found 'session' scope"
          }
        ],
        "SpringBootWebSecurityConfiguration.WebSecurityEnablerConfiguration": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required class 'org.springframework.security.config.annotation.web.configuration.EnableWebSecurity'"
          },
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (names: springSecurityFilterChain; SearchStrategy: all) did not find any beans"
          }
        ],
        "SqlInitializationAutoConfiguration": [
          {
            "condition": "OnPropertyCondition",
            "message": "@ConditionalOnProperty (spring.sql.init.enabled) matched"
          },
          {
            "condition": "SqlInitializationAutoConfiguration.SqlInitializationModeCondition",
            "message": "NoneNestedConditions 0 matched 1 did not; NestedCondition on SqlInitializationAutoConfiguration.SqlInitializationModeCondition.ModeIsNever @ConditionalOnProperty (spring.sql.init.mode=never) did not find property 'mode'"
          }
        ],
        "TaskExecutionAutoConfiguration": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required class 'org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor'"
          }
        ],
        "TaskExecutionAutoConfiguration#applicationTaskExecutor": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: java.util.concurrent.Executor; SearchStrategy: all) did not find any beans"
          }
        ],
        "TaskExecutionAutoConfiguration#taskExecutorBuilder": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.boot.task.TaskExecutorBuilder; SearchStrategy: all) did not find any beans"
          }
        ],
        "TaskSchedulingAutoConfiguration": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required class 'org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler'"
          }
        ],
        "TaskSchedulingAutoConfiguration#taskSchedulerBuilder": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.boot.task.TaskSchedulerBuilder; SearchStrategy: all) did not find any beans"
          }
        ],
        "TemplateEngineConfigurations.DefaultTemplateEngineConfiguration#templateEngine": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.thymeleaf.spring6.ISpringTemplateEngine; SearchStrategy: all) did not find any beans"
          }
        ],
        "ThymeleafAutoConfiguration": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required classes 'org.thymeleaf.templatemode.TemplateMode', 'org.thymeleaf.spring6.SpringTemplateEngine'"
          }
        ],
        "ThymeleafAutoConfiguration.DefaultTemplateResolverConfiguration": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (names: defaultTemplateResolver; SearchStrategy: all) did not find any beans"
          }
        ],
        "ThymeleafAutoConfiguration.ThymeleafWebMvcConfiguration": [
          {
            "condition": "OnWebApplicationCondition",
            "message": "found 'session' scope"
          },
          {
            "condition": "OnPropertyCondition",
            "message": "@ConditionalOnProperty (spring.thymeleaf.enabled) matched"
          }
        ],
        "ThymeleafAutoConfiguration.ThymeleafWebMvcConfiguration.ThymeleafViewResolverConfiguration#thymeleafViewResolver": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (names: thymeleafViewResolver; SearchStrategy: all) did not find any beans"
          }
        ],
        "TransactionAutoConfiguration": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required class 'org.springframework.transaction.PlatformTransactionManager'"
          }
        ],
        "TransactionAutoConfiguration#platformTransactionManagerCustomizers": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.boot.autoconfigure.transaction.TransactionManagerCustomizers; SearchStrategy: all) did not find any beans"
          }
        ],
        "ValidationAutoConfiguration": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required class 'jakarta.validation.executable.ExecutableValidator'"
          },
          {
            "condition": "OnResourceCondition",
            "message": "@ConditionalOnResource found location classpath:META-INF/services/jakarta.validation.spi.ValidationProvider"
          }
        ],
        "ValidationAutoConfiguration#defaultValidator": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: jakarta.validation.Validator; SearchStrategy: all) did not find any beans"
          }
        ],
        "ValidationAutoConfiguration#methodValidationPostProcessor": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.validation.beanvalidation.MethodValidationPostProcessor; SearchStrategy: current) did not find any beans"
          }
        ],
        "RestTemplateAutoConfiguration": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required class 'org.springframework.web.client.RestTemplate'"
          },
          {
            "condition": "RestTemplateAutoConfiguration.NotReactiveWebApplicationCondition",
            "message": "NoneNestedConditions 0 matched 1 did not; NestedCondition on RestTemplateAutoConfiguration.NotReactiveWebApplicationCondition.ReactiveWebApplication not a reactive web application"
          }
        ],
        "RestTemplateAutoConfiguration#restTemplateBuilder": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.boot.web.client.RestTemplateBuilder; SearchStrategy: all) did not find any beans"
          }
        ],
        "RestTemplateAutoConfiguration#restTemplateBuilderConfigurer": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.boot.autoconfigure.web.client.RestTemplateBuilderConfigurer; SearchStrategy: all) did not find any beans"
          }
        ],
        "EmbeddedWebServerFactoryCustomizerAutoConfiguration": [
          {
            "condition": "OnWebApplicationCondition",
            "message": "@ConditionalOnWebApplication (required) found 'session' scope"
          }
        ],
        "EmbeddedWebServerFactoryCustomizerAutoConfiguration.NettyWebServerFactoryCustomizerConfiguration": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required class 'reactor.netty.http.server.HttpServer'"
          }
        ],
        "EmbeddedWebServerFactoryCustomizerAutoConfiguration.TomcatWebServerFactoryCustomizerConfiguration": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required classes 'org.apache.catalina.startup.Tomcat', 'org.apache.coyote.UpgradeProtocol'"
          }
        ],
        "ClientHttpConnectorAutoConfiguration": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required class 'org.springframework.web.reactive.function.client.WebClient'"
          }
        ],
        "ClientHttpConnectorAutoConfiguration#clientConnectorCustomizer": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnBean (types: org.springframework.http.client.reactive.ClientHttpConnector; SearchStrategy: all) found bean 'reactorClientHttpConnector'"
          }
        ],
        "ClientHttpConnectorConfiguration.ReactorNetty": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required class 'reactor.netty.http.client.HttpClient'"
          },
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.http.client.reactive.ClientHttpConnector; SearchStrategy: all) did not find any beans"
          }
        ],
        "ClientHttpConnectorConfiguration.ReactorNetty#reactorClientResourceFactory": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.http.client.reactive.ReactorResourceFactory; SearchStrategy: all) did not find any beans"
          }
        ],
        "WebClientAutoConfiguration": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required class 'org.springframework.web.reactive.function.client.WebClient'"
          }
        ],
        "WebClientAutoConfiguration#webClientBuilder": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.web.reactive.function.client.WebClient$Builder; SearchStrategy: all) did not find any beans"
          }
        ],
        "WebClientAutoConfiguration.WebClientCodecsConfiguration": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnBean (types: org.springframework.boot.web.codec.CodecCustomizer; SearchStrategy: all) found beans 'jacksonCodecCustomizer', 'defaultCodecCustomizer'"
          }
        ],
        "WebClientAutoConfiguration.WebClientCodecsConfiguration#exchangeStrategiesCustomizer": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.boot.autoconfigure.web.reactive.function.client.WebClientCodecCustomizer; SearchStrategy: all) did not find any beans"
          }
        ],
        "DispatcherServletAutoConfiguration": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required class 'org.springframework.web.servlet.DispatcherServlet'"
          },
          {
            "condition": "OnWebApplicationCondition",
            "message": "found 'session' scope"
          }
        ],
        "DispatcherServletAutoConfiguration.DispatcherServletConfiguration": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required class 'jakarta.servlet.ServletRegistration'"
          },
          {
            "condition": "DispatcherServletAutoConfiguration.DefaultDispatcherServletCondition",
            "message": "Default DispatcherServlet did not find dispatcher servlet beans"
          }
        ],
        "DispatcherServletAutoConfiguration.DispatcherServletRegistrationConfiguration": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required class 'jakarta.servlet.ServletRegistration'"
          },
          {
            "condition": "DispatcherServletAutoConfiguration.DispatcherServletRegistrationCondition",
            "message": "DispatcherServlet Registration did not find servlet registration bean"
          }
        ],
        "DispatcherServletAutoConfiguration.DispatcherServletRegistrationConfiguration#dispatcherServletRegistration": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnBean (names: dispatcherServlet types: org.springframework.web.servlet.DispatcherServlet; SearchStrategy: all) found bean 'dispatcherServlet'"
          }
        ],
        "HttpEncodingAutoConfiguration": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required class 'org.springframework.web.filter.CharacterEncodingFilter'"
          },
          {
            "condition": "OnWebApplicationCondition",
            "message": "found 'session' scope"
          },
          {
            "condition": "OnPropertyCondition",
            "message": "@ConditionalOnProperty (server.servlet.encoding.enabled) matched"
          }
        ],
        "HttpEncodingAutoConfiguration#characterEncodingFilter": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.web.filter.CharacterEncodingFilter; SearchStrategy: all) did not find any beans"
          }
        ],
        "MultipartAutoConfiguration": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required classes 'jakarta.servlet.Servlet', 'org.springframework.web.multipart.support.StandardServletMultipartResolver', 'jakarta.servlet.MultipartConfigElement'"
          },
          {
            "condition": "OnWebApplicationCondition",
            "message": "found 'session' scope"
          },
          {
            "condition": "OnPropertyCondition",
            "message": "@ConditionalOnProperty (spring.servlet.multipart.enabled) matched"
          }
        ],
        "MultipartAutoConfiguration#multipartConfigElement": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: jakarta.servlet.MultipartConfigElement; SearchStrategy: all) did not find any beans"
          }
        ],
        "MultipartAutoConfiguration#multipartResolver": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.web.multipart.MultipartResolver; SearchStrategy: all) did not find any beans"
          }
        ],
        "ServletWebServerFactoryAutoConfiguration": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required class 'jakarta.servlet.ServletRequest'"
          },
          {
            "condition": "OnWebApplicationCondition",
            "message": "found 'session' scope"
          }
        ],
        "ServletWebServerFactoryAutoConfiguration#tomcatServletWebServerFactoryCustomizer": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required class 'org.apache.catalina.startup.Tomcat'"
          }
        ],
        "ServletWebServerFactoryConfiguration.EmbeddedTomcat": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required classes 'jakarta.servlet.Servlet', 'org.apache.catalina.startup.Tomcat', 'org.apache.coyote.UpgradeProtocol'"
          },
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.boot.web.servlet.server.ServletWebServerFactory; SearchStrategy: current) did not find any beans"
          }
        ],
        "WebMvcAutoConfiguration": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required classes 'jakarta.servlet.Servlet', 'org.springframework.web.servlet.DispatcherServlet', 'org.springframework.web.servlet.config.annotation.WebMvcConfigurer'"
          },
          {
            "condition": "OnWebApplicationCondition",
            "message": "found 'session' scope"
          },
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport; SearchStrategy: all) did not find any beans"
          }
        ],
        "WebMvcAutoConfiguration#formContentFilter": [
          {
            "condition": "OnPropertyCondition",
            "message": "@ConditionalOnProperty (spring.mvc.formcontent.filter.enabled) matched"
          },
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.web.filter.FormContentFilter; SearchStrategy: all) did not find any beans"
          }
        ],
        "WebMvcAutoConfiguration.EnableWebMvcConfiguration#flashMapManager": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (names: flashMapManager; SearchStrategy: all) did not find any beans"
          }
        ],
        "WebMvcAutoConfiguration.EnableWebMvcConfiguration#localeResolver": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (names: localeResolver; SearchStrategy: all) did not find any beans"
          }
        ],
        "WebMvcAutoConfiguration.EnableWebMvcConfiguration#themeResolver": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (names: themeResolver; SearchStrategy: all) did not find any beans"
          }
        ],
        "WebMvcAutoConfiguration.WebMvcAutoConfigurationAdapter#defaultViewResolver": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.web.servlet.view.InternalResourceViewResolver; SearchStrategy: all) did not find any beans"
          }
        ],
        "WebMvcAutoConfiguration.WebMvcAutoConfigurationAdapter#requestContextFilter": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.web.context.request.RequestContextListener,org.springframework.web.filter.RequestContextFilter; SearchStrategy: all) did not find any beans"
          }
        ],
        "WebMvcAutoConfiguration.WebMvcAutoConfigurationAdapter#viewResolver": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnBean (types: org.springframework.web.servlet.ViewResolver; SearchStrategy: all) found beans 'defaultViewResolver', 'beanNameViewResolver', 'mvcViewResolver'; @ConditionalOnMissingBean (names: viewResolver types: org.springframework.web.servlet.view.ContentNegotiatingViewResolver; SearchStrategy: all) did not find any beans"
          }
        ],
        "ErrorMvcAutoConfiguration": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required classes 'jakarta.servlet.Servlet', 'org.springframework.web.servlet.DispatcherServlet'"
          },
          {
            "condition": "OnWebApplicationCondition",
            "message": "found 'session' scope"
          }
        ],
        "ErrorMvcAutoConfiguration#basicErrorController": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.boot.web.servlet.error.ErrorController; SearchStrategy: current) did not find any beans"
          }
        ],
        "ErrorMvcAutoConfiguration#errorAttributes": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.boot.web.servlet.error.ErrorAttributes; SearchStrategy: current) did not find any beans"
          }
        ],
        "ErrorMvcAutoConfiguration.DefaultErrorViewResolverConfiguration#conventionErrorViewResolver": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnBean (types: org.springframework.web.servlet.DispatcherServlet; SearchStrategy: all) found bean 'dispatcherServlet'; @ConditionalOnMissingBean (types: org.springframework.boot.autoconfigure.web.servlet.error.ErrorViewResolver; SearchStrategy: all) did not find any beans"
          }
        ],
        "ErrorMvcAutoConfiguration.WhitelabelErrorViewConfiguration": [
          {
            "condition": "OnPropertyCondition",
            "message": "@ConditionalOnProperty (server.error.whitelabel.enabled) matched"
          },
          {
            "condition": "ErrorMvcAutoConfiguration.ErrorTemplateMissingCondition",
            "message": "ErrorTemplate Missing did not find error template view"
          }
        ],
        "ErrorMvcAutoConfiguration.WhitelabelErrorViewConfiguration#beanNameViewResolver": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.web.servlet.view.BeanNameViewResolver; SearchStrategy: all) did not find any beans"
          }
        ],
        "ErrorMvcAutoConfiguration.WhitelabelErrorViewConfiguration#defaultErrorView": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (names: error; SearchStrategy: all) did not find any beans"
          }
        ],
        "WebSocketServletAutoConfiguration": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required classes 'jakarta.servlet.Servlet', 'jakarta.websocket.server.ServerContainer'"
          },
          {
            "condition": "OnWebApplicationCondition",
            "message": "found 'session' scope"
          }
        ],
        "WebSocketServletAutoConfiguration.TomcatWebSocketConfiguration": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required classes 'org.apache.catalina.startup.Tomcat', 'org.apache.tomcat.websocket.server.WsSci'"
          }
        ],
        "WebSocketServletAutoConfiguration.TomcatWebSocketConfiguration#websocketServletWebServerCustomizer": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (names: websocketServletWebServerCustomizer; SearchStrategy: all) did not find any beans"
          }
        ],
        "LocalDevToolsAutoConfiguration": [
          {
            "condition": "OnInitializedRestarterCondition",
            "message": "Initialized Restarter Condition available and initialized"
          }
        ],
        "LocalDevToolsAutoConfiguration.LiveReloadConfiguration": [
          {
            "condition": "OnPropertyCondition",
            "message": "@ConditionalOnProperty (spring.devtools.livereload.enabled) matched"
          }
        ],
        "LocalDevToolsAutoConfiguration.LiveReloadConfiguration#liveReloadServer": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.boot.devtools.livereload.LiveReloadServer; SearchStrategy: all) did not find any beans"
          }
        ],
        "LocalDevToolsAutoConfiguration.RestartConfiguration": [
          {
            "condition": "OnPropertyCondition",
            "message": "@ConditionalOnProperty (spring.devtools.restart.enabled) matched"
          }
        ],
        "LocalDevToolsAutoConfiguration.RestartConfiguration#classPathFileSystemWatcher": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.boot.devtools.classpath.ClassPathFileSystemWatcher; SearchStrategy: all) did not find any beans"
          }
        ],
        "LocalDevToolsAutoConfiguration.RestartConfiguration#classPathRestartStrategy": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.boot.devtools.classpath.ClassPathRestartStrategy; SearchStrategy: all) did not find any beans"
          }
        ],
        "LocalDevToolsAutoConfiguration.RestartConfiguration#conditionEvaluationDeltaLoggingListener": [
          {
            "condition": "OnPropertyCondition",
            "message": "@ConditionalOnProperty (spring.devtools.restart.log-condition-evaluation-delta) matched"
          }
        ]
      },
      "negativeMatches": {
        "AuditAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnBean (types: org.springframework.boot.actuate.audit.AuditEventRepository; SearchStrategy: all) did not find any beans of type org.springframework.boot.actuate.audit.AuditEventRepository"
            }
          ],
          "matched": [
            {
              "condition": "OnPropertyCondition",
              "message": "@ConditionalOnProperty (management.auditevents.enabled) matched"
            }
          ]
        },
        "AuditEventsEndpointAutoConfiguration#auditEventsEndpoint": {
          "notMatched": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnBean (types: org.springframework.boot.actuate.audit.AuditEventRepository; SearchStrategy: all) did not find any beans of type org.springframework.boot.actuate.audit.AuditEventRepository"
            }
          ],
          "matched": []
        },
        "AvailabilityHealthContributorAutoConfiguration#livenessStateHealthIndicator": {
          "notMatched": [
            {
              "condition": "OnPropertyCondition",
              "message": "@ConditionalOnProperty (management.health.livenessstate.enabled=true) did not find property 'enabled'"
            }
          ],
          "matched": []
        },
        "AvailabilityHealthContributorAutoConfiguration#readinessStateHealthIndicator": {
          "notMatched": [
            {
              "condition": "OnPropertyCondition",
              "message": "@ConditionalOnProperty (management.health.readinessstate.enabled=true) did not find property 'enabled'"
            }
          ],
          "matched": []
        },
        "AvailabilityProbesAutoConfiguration": {
          "notMatched": [
            {
              "condition": "AvailabilityProbesAutoConfiguration.ProbesCondition",
              "message": "Probes availability not running on a supported cloud platform"
            }
          ],
          "matched": []
        },
        "CassandraHealthContributorAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'com.datastax.oss.driver.api.core.CqlSession'"
            }
          ],
          "matched": []
        },
        "CassandraReactiveHealthContributorAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'com.datastax.oss.driver.api.core.CqlSession'"
            }
          ],
          "matched": []
        },
        "ReactiveCloudFoundryActuatorAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnWebApplicationCondition",
              "message": "not a reactive web application"
            }
          ],
          "matched": []
        },
        "CloudFoundryActuatorAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnCloudPlatformCondition",
              "message": "@ConditionalOnCloudPlatform did not find CLOUD_FOUNDRY"
            }
          ],
          "matched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass found required class 'org.springframework.web.servlet.DispatcherServlet'"
            },
            {
              "condition": "OnWebApplicationCondition",
              "message": "found 'session' scope"
            },
            {
              "condition": "OnPropertyCondition",
              "message": "@ConditionalOnProperty (management.cloudfoundry.enabled) matched"
            }
          ]
        },
        "ShutdownEndpointAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnAvailableEndpointCondition",
              "message": "@ConditionalOnAvailableEndpoint no property management.endpoint.shutdown.enabled found so using endpoint default of false"
            }
          ],
          "matched": []
        },
        "CouchbaseHealthContributorAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'com.couchbase.client.java.Cluster'"
            }
          ],
          "matched": []
        },
        "CouchbaseReactiveHealthContributorAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'com.couchbase.client.java.Cluster'"
            }
          ],
          "matched": []
        },
        "ElasticsearchReactiveHealthContributorAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.springframework.data.elasticsearch.client.elc.ReactiveElasticsearchClient'"
            }
          ],
          "matched": []
        },
        "MongoHealthContributorAutoConfiguration#mongoHealthContributor": {
          "notMatched": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnMissingBean (names: mongoHealthIndicator,mongoHealthContributor; SearchStrategy: all) found beans named mongoHealthContributor"
            }
          ],
          "matched": []
        },
        "RedisHealthContributorAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.springframework.data.redis.connection.RedisConnectionFactory'"
            }
          ],
          "matched": []
        },
        "RedisReactiveHealthContributorAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.springframework.data.redis.connection.ReactiveRedisConnectionFactory'"
            }
          ],
          "matched": []
        },
        "ElasticsearchRestHealthContributorAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.elasticsearch.client.RestClient'"
            }
          ],
          "matched": []
        },
        "ServletEndpointManagementContextConfiguration.JerseyServletEndpointManagementContextConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.glassfish.jersey.server.ResourceConfig'"
            }
          ],
          "matched": []
        },
        "JerseyWebEndpointManagementContextConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.glassfish.jersey.server.ResourceConfig'"
            }
          ],
          "matched": []
        },
        "WebFluxEndpointManagementContextConfiguration": {
          "notMatched": [
            {
              "condition": "OnWebApplicationCondition",
              "message": "not a reactive web application"
            }
          ],
          "matched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass found required classes 'org.springframework.web.reactive.DispatcherHandler', 'org.springframework.http.server.reactive.HttpHandler'"
            }
          ]
        },
        "WebMvcEndpointManagementContextConfiguration#managementHealthEndpointWebMvcHandlerMapping": {
          "notMatched": [
            {
              "condition": "OnManagementPortCondition",
              "message": "Management Port actual port type (SAME) did not match required type (DIFFERENT)"
            }
          ],
          "matched": []
        },
        "FlywayEndpointAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.flywaydb.core.Flyway'"
            }
          ],
          "matched": []
        },
        "HazelcastHealthContributorAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'com.hazelcast.core.HazelcastInstance'"
            }
          ],
          "matched": []
        },
        "HealthEndpointReactiveWebExtensionConfiguration": {
          "notMatched": [
            {
              "condition": "OnWebApplicationCondition",
              "message": "not a reactive web application"
            }
          ],
          "matched": []
        },
        "HealthEndpointWebExtensionConfiguration.JerseyAdditionalHealthEndpointPathsConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.glassfish.jersey.server.ResourceConfig'"
            }
          ],
          "matched": []
        },
        "InfluxDbHealthContributorAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.influxdb.InfluxDB'"
            }
          ],
          "matched": []
        },
        "InfoContributorAutoConfiguration#buildInfoContributor": {
          "notMatched": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnSingleCandidate (types: org.springframework.boot.info.BuildProperties; SearchStrategy: all) did not find any beans"
            }
          ],
          "matched": [
            {
              "condition": "OnEnabledInfoContributorCondition",
              "message": "@ConditionalOnEnabledInfoContributor management.info.defaults.enabled is considered true"
            }
          ]
        },
        "InfoContributorAutoConfiguration#gitInfoContributor": {
          "notMatched": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnSingleCandidate (types: org.springframework.boot.info.GitProperties; SearchStrategy: all) did not find any beans"
            }
          ],
          "matched": [
            {
              "condition": "OnEnabledInfoContributorCondition",
              "message": "@ConditionalOnEnabledInfoContributor management.info.defaults.enabled is considered true"
            }
          ]
        },
        "InfoContributorAutoConfiguration#javaInfoContributor": {
          "notMatched": [
            {
              "condition": "OnEnabledInfoContributorCondition",
              "message": "@ConditionalOnEnabledInfoContributor management.info.java.enabled is not true"
            }
          ],
          "matched": []
        },
        "InfoContributorAutoConfiguration#osInfoContributor": {
          "notMatched": [
            {
              "condition": "OnEnabledInfoContributorCondition",
              "message": "@ConditionalOnEnabledInfoContributor management.info.os.enabled is not true"
            }
          ],
          "matched": []
        },
        "DataSourceHealthContributorAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.springframework.jdbc.core.JdbcTemplate'"
            }
          ],
          "matched": []
        },
        "LdapHealthContributorAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.springframework.ldap.core.LdapOperations'"
            }
          ],
          "matched": []
        },
        "LiquibaseEndpointAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'liquibase.integration.spring.SpringLiquibase'"
            }
          ],
          "matched": []
        },
        "MailHealthContributorAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.springframework.mail.javamail.JavaMailSenderImpl'"
            }
          ],
          "matched": []
        },
        "CompositeMeterRegistryConfiguration": {
          "notMatched": [
            {
              "condition": "CompositeMeterRegistryConfiguration.MultipleNonPrimaryMeterRegistriesCondition",
              "message": "NoneNestedConditions 1 matched 1 did not; NestedCondition on CompositeMeterRegistryConfiguration.MultipleNonPrimaryMeterRegistriesCondition.SingleInjectableMeterRegistry @ConditionalOnSingleCandidate (types: io.micrometer.core.instrument.MeterRegistry; SearchStrategy: all) found a single bean 'simpleMeterRegistry'; NestedCondition on CompositeMeterRegistryConfiguration.MultipleNonPrimaryMeterRegistriesCondition.NoMeterRegistryCondition @ConditionalOnMissingBean (types: io.micrometer.core.instrument.MeterRegistry; SearchStrategy: all) found beans of type 'io.micrometer.core.instrument.MeterRegistry' simpleMeterRegistry"
            }
          ],
          "matched": []
        },
        "Log4J2MetricsAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.apache.logging.log4j.core.LoggerContext'"
            }
          ],
          "matched": []
        },
        "NoOpMeterRegistryConfiguration": {
          "notMatched": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnMissingBean (types: io.micrometer.core.instrument.MeterRegistry; SearchStrategy: all) found beans of type 'io.micrometer.core.instrument.MeterRegistry' simpleMeterRegistry"
            }
          ],
          "matched": []
        },
        "CacheMeterBinderProvidersConfiguration.Cache2kCacheMeterBinderProviderConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required classes 'org.cache2k.Cache2kBuilder', 'org.cache2k.extra.spring.SpringCache2kCache', 'org.cache2k.extra.micrometer.Cache2kCacheMetrics'"
            }
          ],
          "matched": []
        },
        "CacheMeterBinderProvidersConfiguration.CaffeineCacheMeterBinderProviderConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required classes 'org.springframework.cache.caffeine.CaffeineCache', 'com.github.benmanes.caffeine.cache.Cache'"
            }
          ],
          "matched": []
        },
        "CacheMeterBinderProvidersConfiguration.HazelcastCacheMeterBinderProviderConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required classes 'com.hazelcast.spring.cache.HazelcastCache', 'com.hazelcast.core.Hazelcast'"
            }
          ],
          "matched": []
        },
        "CacheMeterBinderProvidersConfiguration.JCacheCacheMeterBinderProviderConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required classes 'org.springframework.cache.jcache.JCacheCache', 'javax.cache.CacheManager'"
            }
          ],
          "matched": []
        },
        "CacheMeterBinderProvidersConfiguration.RedisCacheMeterBinderProviderConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.springframework.data.redis.cache.RedisCache'"
            }
          ],
          "matched": []
        },
        "CacheMetricsAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnBean (types: org.springframework.cache.CacheManager; SearchStrategy: all) did not find any beans of type org.springframework.cache.CacheManager"
            }
          ],
          "matched": []
        },
        "AppOpticsMetricsExportAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'io.micrometer.appoptics.AppOpticsMeterRegistry'"
            }
          ],
          "matched": []
        },
        "AtlasMetricsExportAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'io.micrometer.atlas.AtlasMeterRegistry'"
            }
          ],
          "matched": []
        },
        "DatadogMetricsExportAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'io.micrometer.datadog.DatadogMeterRegistry'"
            }
          ],
          "matched": []
        },
        "DynatraceMetricsExportAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'io.micrometer.dynatrace.DynatraceMeterRegistry'"
            }
          ],
          "matched": []
        },
        "ElasticMetricsExportAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'io.micrometer.elastic.ElasticMeterRegistry'"
            }
          ],
          "matched": []
        },
        "GangliaMetricsExportAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'io.micrometer.ganglia.GangliaMeterRegistry'"
            }
          ],
          "matched": []
        },
        "GraphiteMetricsExportAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'io.micrometer.graphite.GraphiteMeterRegistry'"
            }
          ],
          "matched": []
        },
        "HumioMetricsExportAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'io.micrometer.humio.HumioMeterRegistry'"
            }
          ],
          "matched": []
        },
        "InfluxMetricsExportAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'io.micrometer.influx.InfluxMeterRegistry'"
            }
          ],
          "matched": []
        },
        "JmxMetricsExportAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'io.micrometer.jmx.JmxMeterRegistry'"
            }
          ],
          "matched": []
        },
        "KairosMetricsExportAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'io.micrometer.kairos.KairosMeterRegistry'"
            }
          ],
          "matched": []
        },
        "NewRelicMetricsExportAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'io.micrometer.newrelic.NewRelicMeterRegistry'"
            }
          ],
          "matched": []
        },
        "OtlpMetricsExportAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'io.micrometer.registry.otlp.OtlpMeterRegistry'"
            }
          ],
          "matched": []
        },
        "PrometheusMetricsExportAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'io.micrometer.prometheus.PrometheusMeterRegistry'"
            }
          ],
          "matched": []
        },
        "SignalFxMetricsExportAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'io.micrometer.signalfx.SignalFxMeterRegistry'"
            }
          ],
          "matched": []
        },
        "StackdriverMetricsExportAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'io.micrometer.stackdriver.StackdriverMeterRegistry'"
            }
          ],
          "matched": []
        },
        "StatsdMetricsExportAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'io.micrometer.statsd.StatsdMeterRegistry'"
            }
          ],
          "matched": []
        },
        "WavefrontMetricsExportAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'com.wavefront.sdk.common.WavefrontSender'"
            }
          ],
          "matched": []
        },
        "DataSourcePoolMetricsAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnBean (types: javax.sql.DataSource,io.micrometer.core.instrument.MeterRegistry; SearchStrategy: all) did not find any beans of type javax.sql.DataSource"
            }
          ],
          "matched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass found required classes 'javax.sql.DataSource', 'io.micrometer.core.instrument.MeterRegistry'"
            }
          ]
        },
        "DataSourcePoolMetricsAutoConfiguration.HikariDataSourceMetricsConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'com.zaxxer.hikari.HikariDataSource'"
            },
            {
              "condition": "ConditionEvaluationReport.AncestorsMatchedCondition",
              "message": "Ancestor org.springframework.boot.actuate.autoconfigure.metrics.jdbc.DataSourcePoolMetricsAutoConfiguration did not match"
            }
          ],
          "matched": []
        },
        "JerseyServerMetricsAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'io.micrometer.core.instrument.binder.jersey.server.MetricsApplicationEventListener'"
            }
          ],
          "matched": []
        },
        "HibernateMetricsAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'jakarta.persistence.EntityManagerFactory'"
            }
          ],
          "matched": []
        },
        "ConnectionPoolMetricsAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'io.r2dbc.pool.ConnectionPool'"
            }
          ],
          "matched": []
        },
        "LettuceMetricsAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'io.lettuce.core.metrics.MicrometerCommandLatencyRecorder'"
            }
          ],
          "matched": []
        },
        "JettyMetricsAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.eclipse.jetty.server.Server'"
            }
          ],
          "matched": []
        },
        "Neo4jHealthContributorAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.neo4j.driver.Driver'"
            }
          ],
          "matched": []
        },
        "ObservationAutoConfiguration.MeterObservationHandlerConfiguration.TracingAndMetricsObservationHandlerConfiguration": {
          "notMatched": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnBean did not find required type 'io.micrometer.tracing.Tracer'"
            },
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnBean (types: io.micrometer.tracing.Tracer; SearchStrategy: all) did not find any beans of type io.micrometer.tracing.Tracer"
            }
          ],
          "matched": []
        },
        "ObservationAutoConfiguration.MetricsWithTracingConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'io.micrometer.tracing.Tracer'"
            }
          ],
          "matched": []
        },
        "ObservationAutoConfiguration.OnlyTracingConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'io.micrometer.tracing.Tracer'"
            }
          ],
          "matched": []
        },
        "GraphQlObservationAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'graphql.GraphQL'"
            }
          ],
          "matched": []
        },
        "WebFluxObservationAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnWebApplicationCondition",
              "message": "not a reactive web application"
            }
          ],
          "matched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass found required class 'io.micrometer.observation.Observation'"
            }
          ]
        },
        "QuartzEndpointAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.quartz.Scheduler'"
            }
          ],
          "matched": []
        },
        "ConnectionFactoryHealthContributorAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'io.r2dbc.spi.ConnectionFactory'"
            }
          ],
          "matched": []
        },
        "ReactiveManagementWebSecurityAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnWebApplicationCondition",
              "message": "not a reactive web application"
            }
          ],
          "matched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass found required classes 'org.springframework.security.config.annotation.web.reactive.EnableWebFluxSecurity', 'org.springframework.security.web.server.WebFilterChainProxy'"
            }
          ]
        },
        "ManagementWebSecurityAutoConfiguration": {
          "notMatched": [
            {
              "condition": "DefaultWebSecurityCondition",
              "message": "AllNestedConditions 1 matched 1 did not; NestedCondition on DefaultWebSecurityCondition.Beans @ConditionalOnMissingBean (types: org.springframework.security.web.SecurityFilterChain; SearchStrategy: all) found beans of type 'org.springframework.security.web.SecurityFilterChain' filterChain; NestedCondition on DefaultWebSecurityCondition.Classes @ConditionalOnClass found required classes 'org.springframework.security.web.SecurityFilterChain', 'org.springframework.security.config.annotation.web.builders.HttpSecurity'"
            }
          ],
          "matched": [
            {
              "condition": "OnWebApplicationCondition",
              "message": "found 'session' scope"
            }
          ]
        },
        "SecurityRequestMatchersManagementContextConfiguration.JerseyRequestMatcherConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.glassfish.jersey.server.ResourceConfig'"
            }
          ],
          "matched": []
        },
        "SessionsEndpointAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.springframework.session.FindByIndexNameSessionRepository'"
            }
          ],
          "matched": []
        },
        "StartupEndpointAutoConfiguration": {
          "notMatched": [
            {
              "condition": "StartupEndpointAutoConfiguration.ApplicationStartupCondition",
              "message": "ApplicationStartup configured applicationStartup is of type class org.springframework.core.metrics.DefaultApplicationStartup, expected BufferingApplicationStartup."
            }
          ],
          "matched": []
        },
        "BraveAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'brave.Tracer'"
            }
          ],
          "matched": []
        },
        "MicrometerTracingAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'io.micrometer.tracing.Tracer'"
            }
          ],
          "matched": []
        },
        "OpenTelemetryAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'io.micrometer.tracing.otel.bridge.OtelTracer'"
            }
          ],
          "matched": []
        },
        "PrometheusExemplarsAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'io.micrometer.tracing.Tracer'"
            }
          ],
          "matched": []
        },
        "WavefrontTracingAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'com.wavefront.sdk.common.WavefrontSender'"
            }
          ],
          "matched": []
        },
        "ZipkinAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'zipkin2.reporter.Sender'"
            }
          ],
          "matched": []
        },
        "WavefrontAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'com.wavefront.sdk.common.application.ApplicationTags'"
            }
          ],
          "matched": []
        },
        "HttpExchangesAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnBean (types: org.springframework.boot.actuate.web.exchanges.HttpExchangeRepository; SearchStrategy: all) did not find any beans of type org.springframework.boot.actuate.web.exchanges.HttpExchangeRepository"
            }
          ],
          "matched": [
            {
              "condition": "OnWebApplicationCondition",
              "message": "@ConditionalOnWebApplication (required) found 'session' scope"
            },
            {
              "condition": "OnPropertyCondition",
              "message": "@ConditionalOnProperty (management.httpexchanges.recording.enabled) matched"
            }
          ]
        },
        "HttpExchangesAutoConfiguration.ReactiveHttpExchangesConfiguration": {
          "notMatched": [
            {
              "condition": "OnWebApplicationCondition",
              "message": "not a reactive web application"
            },
            {
              "condition": "ConditionEvaluationReport.AncestorsMatchedCondition",
              "message": "Ancestor org.springframework.boot.actuate.autoconfigure.web.exchanges.HttpExchangesAutoConfiguration did not match"
            }
          ],
          "matched": []
        },
        "HttpExchangesAutoConfiguration.ServletHttpExchangesConfiguration": {
          "notMatched": [
            {
              "condition": "ConditionEvaluationReport.AncestorsMatchedCondition",
              "message": "Ancestor org.springframework.boot.actuate.autoconfigure.web.exchanges.HttpExchangesAutoConfiguration did not match"
            }
          ],
          "matched": [
            {
              "condition": "OnWebApplicationCondition",
              "message": "found 'session' scope"
            }
          ]
        },
        "HttpExchangesEndpointAutoConfiguration#httpExchangesEndpoint": {
          "notMatched": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnBean (types: org.springframework.boot.actuate.web.exchanges.HttpExchangeRepository; SearchStrategy: all) did not find any beans of type org.springframework.boot.actuate.web.exchanges.HttpExchangeRepository"
            }
          ],
          "matched": []
        },
        "JerseySameManagementContextConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.glassfish.jersey.server.ResourceConfig'"
            }
          ],
          "matched": []
        },
        "MappingsEndpointAutoConfiguration.ReactiveWebConfiguration": {
          "notMatched": [
            {
              "condition": "OnWebApplicationCondition",
              "message": "not a reactive web application"
            }
          ],
          "matched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass found required class 'org.springframework.web.reactive.DispatcherHandler'"
            }
          ]
        },
        "ReactiveManagementContextAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnWebApplicationCondition",
              "message": "not a reactive web application"
            }
          ],
          "matched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass found required class 'reactor.core.publisher.Flux'"
            }
          ]
        },
        "ManagementContextAutoConfiguration.DifferentManagementContextConfiguration": {
          "notMatched": [
            {
              "condition": "OnManagementPortCondition",
              "message": "Management Port actual port type (SAME) did not match required type (DIFFERENT)"
            }
          ],
          "matched": []
        },
        "ServletManagementContextAutoConfiguration.ApplicationContextFilterConfiguration": {
          "notMatched": [
            {
              "condition": "OnPropertyCondition",
              "message": "@ConditionalOnProperty (management.server.add-application-context-header=true) did not find property 'add-application-context-header'"
            }
          ],
          "matched": []
        },
        "RabbitAnnotationDrivenConfiguration#directRabbitListenerContainerFactory": {
          "notMatched": [
            {
              "condition": "OnPropertyCondition",
              "message": "@ConditionalOnProperty (spring.rabbitmq.listener.type=direct) did not find property 'type'"
            }
          ],
          "matched": []
        },
        "RabbitStreamConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.springframework.rabbit.stream.config.StreamRabbitListenerContainerFactory'"
            }
          ],
          "matched": []
        },
        "AopAutoConfiguration.AspectJAutoProxyingConfiguration.JdkDynamicAutoProxyConfiguration": {
          "notMatched": [
            {
              "condition": "OnPropertyCondition",
              "message": "@ConditionalOnProperty (spring.aop.proxy-target-class=false) did not find property 'proxy-target-class'"
            }
          ],
          "matched": []
        },
        "AopAutoConfiguration.ClassProxyingConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnMissingClass found unwanted class 'org.aspectj.weaver.Advice'"
            }
          ],
          "matched": []
        },
        "BatchAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.springframework.batch.core.launch.JobLauncher'"
            }
          ],
          "matched": []
        },
        "Cache2kCacheConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.cache2k.Cache2kBuilder'"
            }
          ],
          "matched": []
        },
        "CacheAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnBean (types: org.springframework.cache.interceptor.CacheAspectSupport; SearchStrategy: all) did not find any beans of type org.springframework.cache.interceptor.CacheAspectSupport"
            }
          ],
          "matched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass found required class 'org.springframework.cache.CacheManager'"
            }
          ]
        },
        "CacheAutoConfiguration.CacheManagerEntityManagerFactoryDependsOnPostProcessor": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean'"
            },
            {
              "condition": "ConditionEvaluationReport.AncestorsMatchedCondition",
              "message": "Ancestor org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration did not match"
            }
          ],
          "matched": []
        },
        "CaffeineCacheConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'com.github.benmanes.caffeine.cache.Caffeine'"
            }
          ],
          "matched": []
        },
        "CouchbaseCacheConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'com.couchbase.client.java.Cluster'"
            }
          ],
          "matched": []
        },
        "HazelcastCacheConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'com.hazelcast.core.HazelcastInstance'"
            }
          ],
          "matched": []
        },
        "InfinispanCacheConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.infinispan.spring.embedded.provider.SpringEmbeddedCacheManager'"
            }
          ],
          "matched": []
        },
        "JCacheCacheConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'javax.cache.Caching'"
            }
          ],
          "matched": []
        },
        "RedisCacheConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.springframework.data.redis.connection.RedisConnectionFactory'"
            }
          ],
          "matched": []
        },
        "CassandraAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'com.datastax.oss.driver.api.core.CqlSession'"
            }
          ],
          "matched": []
        },
        "MessageSourceAutoConfiguration": {
          "notMatched": [
            {
              "condition": "MessageSourceAutoConfiguration.ResourceBundleCondition",
              "message": "ResourceBundle did not find bundle with basename messages"
            }
          ],
          "matched": []
        },
        "CouchbaseAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'com.couchbase.client.java.Cluster'"
            }
          ],
          "matched": []
        },
        "CassandraDataAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'com.datastax.oss.driver.api.core.CqlSession'"
            }
          ],
          "matched": []
        },
        "CassandraReactiveDataAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'com.datastax.oss.driver.api.core.CqlSession'"
            }
          ],
          "matched": []
        },
        "CassandraReactiveRepositoriesAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.springframework.data.cassandra.ReactiveSession'"
            }
          ],
          "matched": []
        },
        "CassandraRepositoriesAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'com.datastax.oss.driver.api.core.CqlSession'"
            }
          ],
          "matched": []
        },
        "CouchbaseDataAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'com.couchbase.client.java.Bucket'"
            }
          ],
          "matched": []
        },
        "CouchbaseReactiveDataAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'com.couchbase.client.java.Cluster'"
            }
          ],
          "matched": []
        },
        "CouchbaseReactiveRepositoriesAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'com.couchbase.client.java.Cluster'"
            }
          ],
          "matched": []
        },
        "CouchbaseRepositoriesAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'com.couchbase.client.java.Bucket'"
            }
          ],
          "matched": []
        },
        "ElasticsearchDataAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.springframework.data.elasticsearch.client.elc.ElasticsearchTemplate'"
            }
          ],
          "matched": []
        },
        "ElasticsearchRepositoriesAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.springframework.data.elasticsearch.repository.ElasticsearchRepository'"
            }
          ],
          "matched": []
        },
        "ReactiveElasticsearchRepositoriesAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.springframework.data.elasticsearch.client.elc.ReactiveElasticsearchClient'"
            }
          ],
          "matched": []
        },
        "JdbcRepositoriesAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.springframework.data.jdbc.repository.config.AbstractJdbcConfiguration'"
            }
          ],
          "matched": []
        },
        "JpaRepositoriesAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.springframework.data.jpa.repository.JpaRepository'"
            }
          ],
          "matched": []
        },
        "LdapRepositoriesAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.springframework.data.ldap.repository.LdapRepository'"
            }
          ],
          "matched": []
        },
        "MongoReactiveDataAutoConfiguration#mappingMongoConverter": {
          "notMatched": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnMissingBean (types: org.springframework.data.mongodb.core.convert.MongoConverter; SearchStrategy: all) found beans of type 'org.springframework.data.mongodb.core.convert.MongoConverter' mappingMongoConverter"
            }
          ],
          "matched": []
        },
        "Neo4jDataAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.neo4j.driver.Driver'"
            }
          ],
          "matched": []
        },
        "Neo4jReactiveDataAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.neo4j.driver.Driver'"
            }
          ],
          "matched": []
        },
        "Neo4jReactiveRepositoriesAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.neo4j.driver.Driver'"
            }
          ],
          "matched": []
        },
        "Neo4jRepositoriesAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.neo4j.driver.Driver'"
            }
          ],
          "matched": []
        },
        "R2dbcDataAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.springframework.data.r2dbc.core.R2dbcEntityTemplate'"
            }
          ],
          "matched": []
        },
        "R2dbcRepositoriesAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'io.r2dbc.spi.ConnectionFactory'"
            }
          ],
          "matched": []
        },
        "RedisAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.springframework.data.redis.core.RedisOperations'"
            }
          ],
          "matched": []
        },
        "RedisReactiveAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.springframework.data.redis.connection.ReactiveRedisConnectionFactory'"
            }
          ],
          "matched": []
        },
        "RedisRepositoriesAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.springframework.data.redis.repository.configuration.EnableRedisRepositories'"
            }
          ],
          "matched": []
        },
        "SpringDataWebAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnMissingBean (types: org.springframework.data.web.PageableHandlerMethodArgumentResolver; SearchStrategy: all) found beans of type 'org.springframework.data.web.PageableHandlerMethodArgumentResolver' pageableResolver"
            }
          ],
          "matched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass found required classes 'org.springframework.data.web.PageableHandlerMethodArgumentResolver', 'org.springframework.web.servlet.config.annotation.WebMvcConfigurer'"
            },
            {
              "condition": "OnWebApplicationCondition",
              "message": "found 'session' scope"
            }
          ]
        },
        "ElasticsearchClientAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'co.elastic.clients.elasticsearch.ElasticsearchClient'"
            }
          ],
          "matched": []
        },
        "ElasticsearchRestClientAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.elasticsearch.client.RestClientBuilder'"
            }
          ],
          "matched": []
        },
        "ReactiveElasticsearchClientAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'co.elastic.clients.transport.ElasticsearchTransport'"
            }
          ],
          "matched": []
        },
        "FlywayAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.flywaydb.core.Flyway'"
            }
          ],
          "matched": []
        },
        "FreeMarkerAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'freemarker.template.Configuration'"
            }
          ],
          "matched": []
        },
        "GraphQlAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'graphql.GraphQL'"
            }
          ],
          "matched": []
        },
        "GraphQlQueryByExampleAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'graphql.GraphQL'"
            }
          ],
          "matched": []
        },
        "GraphQlQuerydslAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'graphql.GraphQL'"
            }
          ],
          "matched": []
        },
        "GraphQlReactiveQueryByExampleAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'graphql.GraphQL'"
            }
          ],
          "matched": []
        },
        "GraphQlReactiveQuerydslAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'graphql.GraphQL'"
            }
          ],
          "matched": []
        },
        "GraphQlWebFluxAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'graphql.GraphQL'"
            }
          ],
          "matched": []
        },
        "GraphQlRSocketAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'graphql.GraphQL'"
            }
          ],
          "matched": []
        },
        "RSocketGraphQlClientAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'graphql.GraphQL'"
            }
          ],
          "matched": []
        },
        "GraphQlWebFluxSecurityAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'graphql.GraphQL'"
            }
          ],
          "matched": []
        },
        "GraphQlWebMvcSecurityAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'graphql.GraphQL'"
            }
          ],
          "matched": []
        },
        "GraphQlWebMvcAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'graphql.GraphQL'"
            }
          ],
          "matched": []
        },
        "GroovyTemplateAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'groovy.text.markup.MarkupTemplateEngine'"
            }
          ],
          "matched": []
        },
        "GsonAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'com.google.gson.Gson'"
            }
          ],
          "matched": []
        },
        "H2ConsoleAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.h2.server.web.JakartaWebServlet'"
            }
          ],
          "matched": []
        },
        "HypermediaAutoConfiguration.HypermediaConfiguration": {
          "notMatched": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnMissingBean (types: org.springframework.hateoas.client.LinkDiscoverers; SearchStrategy: all) found beans of type 'org.springframework.hateoas.client.LinkDiscoverers' linkDiscoverers"
            }
          ],
          "matched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass found required class 'com.fasterxml.jackson.databind.ObjectMapper'"
            }
          ]
        },
        "HazelcastAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'com.hazelcast.core.HazelcastInstance'"
            }
          ],
          "matched": []
        },
        "HazelcastJpaDependencyAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'com.hazelcast.core.HazelcastInstance'"
            }
          ],
          "matched": []
        },
        "GsonHttpMessageConvertersConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'com.google.gson.Gson'"
            }
          ],
          "matched": []
        },
        "JacksonHttpMessageConvertersConfiguration.MappingJackson2XmlHttpMessageConverterConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'com.fasterxml.jackson.dataformat.xml.XmlMapper'"
            }
          ],
          "matched": []
        },
        "JsonbHttpMessageConvertersConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'jakarta.json.bind.Jsonb'"
            }
          ],
          "matched": []
        },
        "InfluxDbAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.influxdb.InfluxDB'"
            }
          ],
          "matched": []
        },
        "ProjectInfoAutoConfiguration#buildProperties": {
          "notMatched": [
            {
              "condition": "OnResourceCondition",
              "message": "@ConditionalOnResource did not find resource '${spring.info.build.location:classpath:META-INF/build-info.properties}'"
            }
          ],
          "matched": []
        },
        "ProjectInfoAutoConfiguration#gitProperties": {
          "notMatched": [
            {
              "condition": "ProjectInfoAutoConfiguration.GitResourceAvailableCondition",
              "message": "GitResource did not find git info at classpath:git.properties"
            }
          ],
          "matched": []
        },
        "IntegrationAutoConfiguration.IntegrationJdbcConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.springframework.integration.jdbc.store.JdbcMessageStore'"
            }
          ],
          "matched": []
        },
        "IntegrationAutoConfiguration.IntegrationJmxConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.springframework.integration.jmx.config.EnableIntegrationMBeanExport'"
            }
          ],
          "matched": []
        },
        "IntegrationAutoConfiguration.IntegrationRSocketConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.springframework.integration.rsocket.IntegrationRSocketEndpoint'"
            }
          ],
          "matched": []
        },
        "DataSourceAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseType'"
            }
          ],
          "matched": []
        },
        "DataSourceTransactionManagerAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.springframework.jdbc.core.JdbcTemplate'"
            }
          ],
          "matched": []
        },
        "JdbcTemplateAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.springframework.jdbc.core.JdbcTemplate'"
            }
          ],
          "matched": []
        },
        "JndiDataSourceAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseType'"
            }
          ],
          "matched": []
        },
        "XADataSourceAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'jakarta.transaction.TransactionManager'"
            }
          ],
          "matched": []
        },
        "JerseyAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.glassfish.jersey.server.spring.SpringComponentProvider'"
            }
          ],
          "matched": []
        },
        "JmsAnnotationDrivenConfiguration.JndiConfiguration": {
          "notMatched": [
            {
              "condition": "OnJndiCondition",
              "message": "@ConditionalOnJndi JNDI environment is not available"
            }
          ],
          "matched": []
        },
        "JndiConnectionFactoryAutoConfiguration": {
          "notMatched": [
            {
              "condition": "JndiConnectionFactoryAutoConfiguration.JndiOrPropertyCondition",
              "message": "AnyNestedCondition 0 matched 2 did not; NestedCondition on JndiConnectionFactoryAutoConfiguration.JndiOrPropertyCondition.Property @ConditionalOnProperty (spring.jms.jndi-name) did not find property 'jndi-name'; NestedCondition on JndiConnectionFactoryAutoConfiguration.JndiOrPropertyCondition.Jndi @ConditionalOnJndi JNDI environment is not available"
            }
          ],
          "matched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass found required class 'org.springframework.jms.core.JmsTemplate'"
            }
          ]
        },
        "ArtemisConnectionFactoryConfiguration.PooledConnectionFactoryConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required classes 'org.messaginghub.pooled.jms.JmsPoolConnectionFactory', 'org.apache.commons.pool2.PooledObject'"
            }
          ],
          "matched": []
        },
        "ArtemisConnectionFactoryConfiguration.SimpleConnectionFactoryConfiguration#jmsConnectionFactory": {
          "notMatched": [
            {
              "condition": "OnPropertyCondition",
              "message": "@ConditionalOnProperty (spring.jms.cache.enabled=false) did not find property 'enabled'"
            }
          ],
          "matched": []
        },
        "ArtemisEmbeddedServerConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.apache.activemq.artemis.core.server.embedded.EmbeddedActiveMQ'"
            }
          ],
          "matched": []
        },
        "ArtemisXAConnectionFactoryConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'jakarta.transaction.TransactionManager'"
            }
          ],
          "matched": []
        },
        "JooqAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.jooq.DSLContext'"
            }
          ],
          "matched": []
        },
        "JsonbAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'jakarta.json.bind.Jsonb'"
            }
          ],
          "matched": []
        },
        "KafkaAutoConfiguration#kafkaJaasInitializer": {
          "notMatched": [
            {
              "condition": "OnPropertyCondition",
              "message": "@ConditionalOnProperty (spring.kafka.jaas.enabled) did not find property 'spring.kafka.jaas.enabled'"
            }
          ],
          "matched": []
        },
        "KafkaAutoConfiguration#kafkaRetryTopicConfiguration": {
          "notMatched": [
            {
              "condition": "OnPropertyCondition",
              "message": "@ConditionalOnProperty (spring.kafka.retry.topic.enabled) did not find property 'spring.kafka.retry.topic.enabled'"
            }
          ],
          "matched": []
        },
        "KafkaAutoConfiguration#kafkaTransactionManager": {
          "notMatched": [
            {
              "condition": "OnPropertyCondition",
              "message": "@ConditionalOnProperty (spring.kafka.producer.transaction-id-prefix) did not find property 'spring.kafka.producer.transaction-id-prefix'"
            }
          ],
          "matched": []
        },
        "KafkaStreamsAnnotationDrivenConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.apache.kafka.streams.StreamsBuilder'"
            }
          ],
          "matched": []
        },
        "LdapAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.springframework.ldap.core.ContextSource'"
            }
          ],
          "matched": []
        },
        "EmbeddedLdapAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'com.unboundid.ldap.listener.InMemoryDirectoryServer'"
            }
          ],
          "matched": []
        },
        "LiquibaseAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'liquibase.change.DatabaseChange'"
            }
          ],
          "matched": []
        },
        "MailSenderAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'jakarta.activation.MimeType'"
            }
          ],
          "matched": []
        },
        "MailSenderValidatorAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnSingleCandidate did not find required type 'org.springframework.mail.javamail.JavaMailSenderImpl'"
            }
          ],
          "matched": []
        },
        "MongoReactiveAutoConfiguration.MongoClientSettingsConfiguration": {
          "notMatched": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnMissingBean (types: com.mongodb.MongoClientSettings; SearchStrategy: all) found beans of type 'com.mongodb.MongoClientSettings' mongoClientSettings"
            }
          ],
          "matched": []
        },
        "MustacheAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'com.samskivert.mustache.Mustache'"
            }
          ],
          "matched": []
        },
        "Neo4jAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.neo4j.driver.Driver'"
            }
          ],
          "matched": []
        },
        "HibernateJpaAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'jakarta.persistence.EntityManager'"
            }
          ],
          "matched": []
        },
        "QuartzAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.quartz.Scheduler'"
            }
          ],
          "matched": []
        },
        "R2dbcAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'io.r2dbc.spi.ConnectionFactory'"
            }
          ],
          "matched": []
        },
        "R2dbcTransactionManagerAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.springframework.r2dbc.connection.R2dbcTransactionManager'"
            }
          ],
          "matched": []
        },
        "RSocketServerAutoConfiguration.EmbeddedServerConfiguration#reactorResourceFactory": {
          "notMatched": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnMissingBean (types: org.springframework.http.client.reactive.ReactorResourceFactory; SearchStrategy: all) found beans of type 'org.springframework.http.client.reactive.ReactorResourceFactory' reactorClientResourceFactory"
            }
          ],
          "matched": []
        },
        "RSocketServerAutoConfiguration.WebFluxServerConfiguration": {
          "notMatched": [
            {
              "condition": "RSocketServerAutoConfiguration.OnRSocketWebServerCondition",
              "message": "AllNestedConditions 1 matched 3 did not; NestedCondition on RSocketServerAutoConfiguration.OnRSocketWebServerCondition.HasWebsocketTransportConfigured @ConditionalOnProperty (spring.rsocket.server.transport=websocket) did not find property 'transport'; NestedCondition on RSocketServerAutoConfiguration.OnRSocketWebServerCondition.HasMappingPathConfigured @ConditionalOnProperty (spring.rsocket.server.mapping-path) did not find property 'mapping-path'; NestedCondition on RSocketServerAutoConfiguration.OnRSocketWebServerCondition.HasNoPortConfigured @ConditionalOnProperty (spring.rsocket.server.port) matched; NestedCondition on RSocketServerAutoConfiguration.OnRSocketWebServerCondition.IsReactiveWebApplication not a reactive web application"
            }
          ],
          "matched": []
        },
        "SecurityDataConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.springframework.security.data.repository.query.SecurityEvaluationContextExtension'"
            }
          ],
          "matched": []
        },
        "ReactiveOAuth2ClientAutoConfiguration": {
          "notMatched": [
            {
              "condition": "ReactiveOAuth2ClientAutoConfiguration.NonServletApplicationCondition",
              "message": "NoneNestedConditions 1 matched 0 did not; NestedCondition on ReactiveOAuth2ClientAutoConfiguration.NonServletApplicationCondition.ServletApplicationCondition found 'session' scope"
            }
          ],
          "matched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass found required classes 'reactor.core.publisher.Flux', 'org.springframework.security.config.annotation.web.reactive.EnableWebFluxSecurity', 'org.springframework.security.oauth2.client.registration.ClientRegistration'"
            }
          ]
        },
        "OAuth2WebSecurityConfiguration.OAuth2SecurityFilterChainConfiguration": {
          "notMatched": [
            {
              "condition": "DefaultWebSecurityCondition",
              "message": "AllNestedConditions 1 matched 1 did not; NestedCondition on DefaultWebSecurityCondition.Beans @ConditionalOnMissingBean (types: org.springframework.security.web.SecurityFilterChain; SearchStrategy: all) found beans of type 'org.springframework.security.web.SecurityFilterChain' filterChain; NestedCondition on DefaultWebSecurityCondition.Classes @ConditionalOnClass found required classes 'org.springframework.security.web.SecurityFilterChain', 'org.springframework.security.config.annotation.web.builders.HttpSecurity'"
            }
          ],
          "matched": []
        },
        "ReactiveOAuth2ResourceServerAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnWebApplicationCondition",
              "message": "not a reactive web application"
            }
          ],
          "matched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass found required class 'org.springframework.security.config.annotation.web.reactive.EnableWebFluxSecurity'"
            }
          ]
        },
        "OAuth2ResourceServerJwtConfiguration.JwtDecoderConfiguration#jwtDecoderByIssuerUri": {
          "notMatched": [
            {
              "condition": "IssuerUriCondition",
              "message": "OpenID Connect Issuer URI Condition did not find issuer-uri property"
            }
          ],
          "matched": []
        },
        "OAuth2ResourceServerJwtConfiguration.JwtDecoderConfiguration#jwtDecoderByPublicKeyValue": {
          "notMatched": [
            {
              "condition": "KeyValueCondition",
              "message": "Public Key Value Condition did not find public-key-location property"
            }
          ],
          "matched": []
        },
        "OAuth2ResourceServerJwtConfiguration.OAuth2SecurityFilterChainConfiguration": {
          "notMatched": [
            {
              "condition": "DefaultWebSecurityCondition",
              "message": "AllNestedConditions 1 matched 1 did not; NestedCondition on DefaultWebSecurityCondition.Beans @ConditionalOnMissingBean (types: org.springframework.security.web.SecurityFilterChain; SearchStrategy: all) found beans of type 'org.springframework.security.web.SecurityFilterChain' filterChain; NestedCondition on DefaultWebSecurityCondition.Classes @ConditionalOnClass found required classes 'org.springframework.security.web.SecurityFilterChain', 'org.springframework.security.config.annotation.web.builders.HttpSecurity'"
            }
          ],
          "matched": []
        },
        "OAuth2ResourceServerOpaqueTokenConfiguration.OAuth2SecurityFilterChainConfiguration": {
          "notMatched": [
            {
              "condition": "DefaultWebSecurityCondition",
              "message": "AllNestedConditions 1 matched 1 did not; NestedCondition on DefaultWebSecurityCondition.Beans @ConditionalOnMissingBean (types: org.springframework.security.web.SecurityFilterChain; SearchStrategy: all) found beans of type 'org.springframework.security.web.SecurityFilterChain' filterChain; NestedCondition on DefaultWebSecurityCondition.Classes @ConditionalOnClass found required classes 'org.springframework.security.web.SecurityFilterChain', 'org.springframework.security.config.annotation.web.builders.HttpSecurity'"
            }
          ],
          "matched": []
        },
        "OAuth2ResourceServerOpaqueTokenConfiguration.OpaqueTokenIntrospectionClientConfiguration#opaqueTokenIntrospector": {
          "notMatched": [
            {
              "condition": "OnPropertyCondition",
              "message": "@ConditionalOnProperty (spring.security.oauth2.resourceserver.opaquetoken.introspection-uri) did not find property 'spring.security.oauth2.resourceserver.opaquetoken.introspection-uri'"
            }
          ],
          "matched": []
        },
        "ReactiveSecurityAutoConfiguration.EnableWebFluxSecurityConfiguration": {
          "notMatched": [
            {
              "condition": "OnWebApplicationCondition",
              "message": "not a reactive web application"
            }
          ],
          "matched": []
        },
        "RSocketSecurityAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.springframework.security.rsocket.core.SecuritySocketAcceptorInterceptor'"
            }
          ],
          "matched": []
        },
        "Saml2RelyingPartyAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.springframework.security.saml2.provider.service.registration.RelyingPartyRegistrationRepository'"
            }
          ],
          "matched": []
        },
        "SpringBootWebSecurityConfiguration.SecurityFilterChainConfiguration": {
          "notMatched": [
            {
              "condition": "DefaultWebSecurityCondition",
              "message": "AllNestedConditions 1 matched 1 did not; NestedCondition on DefaultWebSecurityCondition.Beans @ConditionalOnMissingBean (types: org.springframework.security.web.SecurityFilterChain; SearchStrategy: all) found beans of type 'org.springframework.security.web.SecurityFilterChain' filterChain; NestedCondition on DefaultWebSecurityCondition.Classes @ConditionalOnClass found required classes 'org.springframework.security.web.SecurityFilterChain', 'org.springframework.security.config.annotation.web.builders.HttpSecurity'"
            }
          ],
          "matched": []
        },
        "UserDetailsServiceAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnMissingBean (types: org.springframework.security.authentication.AuthenticationManager,org.springframework.security.authentication.AuthenticationProvider,org.springframework.security.core.userdetails.UserDetailsService,org.springframework.security.authentication.AuthenticationManagerResolver,org.springframework.security.oauth2.jwt.JwtDecoder,org.springframework.security.oauth2.server.resource.introspection.OpaqueTokenIntrospector,org.springframework.security.oauth2.client.registration.ClientRegistrationRepository,org.springframework.security.saml2.provider.service.registration.RelyingPartyRegistrationRepository; SearchStrategy: all) found beans of type 'org.springframework.security.oauth2.jwt.JwtDecoder' jwtDecoderByJwkKeySetUri and found beans of type 'org.springframework.security.core.userdetails.UserDetailsService' userDetailsService and found beans of type 'org.springframework.security.oauth2.client.registration.ClientRegistrationRepository' clientRegistrationRepository"
            }
          ],
          "matched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass found required class 'org.springframework.security.authentication.AuthenticationManager'"
            }
          ]
        },
        "SendGridAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'com.sendgrid.SendGrid'"
            }
          ],
          "matched": []
        },
        "SessionAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.springframework.session.Session'"
            }
          ],
          "matched": []
        },
        "DataSourceInitializationConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.springframework.jdbc.datasource.init.DatabasePopulator'"
            }
          ],
          "matched": []
        },
        "R2dbcInitializationConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required classes 'io.r2dbc.spi.ConnectionFactory', 'org.springframework.r2dbc.connection.init.DatabasePopulator'"
            }
          ],
          "matched": []
        },
        "TaskSchedulingAutoConfiguration#scheduledBeanLazyInitializationExcludeFilter": {
          "notMatched": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnBean (names: org.springframework.context.annotation.internalScheduledAnnotationProcessor; SearchStrategy: all) did not find any beans named org.springframework.context.annotation.internalScheduledAnnotationProcessor"
            }
          ],
          "matched": []
        },
        "TaskSchedulingAutoConfiguration#taskScheduler": {
          "notMatched": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnBean (names: org.springframework.context.annotation.internalScheduledAnnotationProcessor; SearchStrategy: all) did not find any beans named org.springframework.context.annotation.internalScheduledAnnotationProcessor"
            }
          ],
          "matched": []
        },
        "TemplateEngineConfigurations.ReactiveTemplateEngineConfiguration": {
          "notMatched": [
            {
              "condition": "OnWebApplicationCondition",
              "message": "not a reactive web application"
            }
          ],
          "matched": []
        },
        "ThymeleafAutoConfiguration.DataAttributeDialectConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'com.github.mxab.thymeleaf.extras.dataattribute.dialect.DataAttributeDialect'"
            }
          ],
          "matched": []
        },
        "ThymeleafAutoConfiguration.ThymeleafSecurityDialectConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.thymeleaf.extras.springsecurity6.dialect.SpringSecurityDialect'"
            }
          ],
          "matched": []
        },
        "ThymeleafAutoConfiguration.ThymeleafWebFluxConfiguration": {
          "notMatched": [
            {
              "condition": "OnWebApplicationCondition",
              "message": "not a reactive web application"
            }
          ],
          "matched": []
        },
        "ThymeleafAutoConfiguration.ThymeleafWebLayoutConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'nz.net.ultraq.thymeleaf.layoutdialect.LayoutDialect'"
            }
          ],
          "matched": []
        },
        "ThymeleafAutoConfiguration.ThymeleafWebMvcConfiguration#resourceUrlEncodingFilter": {
          "notMatched": [
            {
              "condition": "OnEnabledResourceChainCondition",
              "message": "@ConditionalOnEnabledResourceChain did not find class org.webjars.WebJarAssetLocator"
            }
          ],
          "matched": []
        },
        "TransactionAutoConfiguration#transactionalOperator": {
          "notMatched": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnSingleCandidate (types: org.springframework.transaction.ReactiveTransactionManager; SearchStrategy: all) did not find any beans"
            }
          ],
          "matched": []
        },
        "TransactionAutoConfiguration.EnableTransactionManagementConfiguration": {
          "notMatched": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnBean (types: org.springframework.transaction.TransactionManager; SearchStrategy: all) did not find any beans of type org.springframework.transaction.TransactionManager"
            }
          ],
          "matched": []
        },
        "TransactionAutoConfiguration.EnableTransactionManagementConfiguration.CglibAutoProxyConfiguration": {
          "notMatched": [
            {
              "condition": "ConditionEvaluationReport.AncestorsMatchedCondition",
              "message": "Ancestor org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration$EnableTransactionManagementConfiguration did not match"
            }
          ],
          "matched": [
            {
              "condition": "OnPropertyCondition",
              "message": "@ConditionalOnProperty (spring.aop.proxy-target-class=true) matched"
            }
          ]
        },
        "TransactionAutoConfiguration.EnableTransactionManagementConfiguration.JdkDynamicAutoProxyConfiguration": {
          "notMatched": [
            {
              "condition": "OnPropertyCondition",
              "message": "@ConditionalOnProperty (spring.aop.proxy-target-class=false) did not find property 'proxy-target-class'"
            },
            {
              "condition": "ConditionEvaluationReport.AncestorsMatchedCondition",
              "message": "Ancestor org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration$EnableTransactionManagementConfiguration did not match"
            }
          ],
          "matched": []
        },
        "TransactionAutoConfiguration.TransactionTemplateConfiguration": {
          "notMatched": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnSingleCandidate (types: org.springframework.transaction.PlatformTransactionManager; SearchStrategy: all) did not find any beans"
            }
          ],
          "matched": []
        },
        "JtaAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'jakarta.transaction.Transaction'"
            }
          ],
          "matched": []
        },
        "EmbeddedWebServerFactoryCustomizerAutoConfiguration.JettyWebServerFactoryCustomizerConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required classes 'org.eclipse.jetty.server.Server', 'org.eclipse.jetty.util.Loader', 'org.eclipse.jetty.webapp.WebAppContext'"
            }
          ],
          "matched": []
        },
        "EmbeddedWebServerFactoryCustomizerAutoConfiguration.UndertowWebServerFactoryCustomizerConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required classes 'io.undertow.Undertow', 'org.xnio.SslClientAuthMode'"
            }
          ],
          "matched": []
        },
        "HttpHandlerAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnWebApplicationCondition",
              "message": "not a reactive web application"
            }
          ],
          "matched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass found required classes 'org.springframework.web.reactive.DispatcherHandler', 'org.springframework.http.server.reactive.HttpHandler'"
            }
          ]
        },
        "ReactiveMultipartAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnWebApplicationCondition",
              "message": "not a reactive web application"
            }
          ],
          "matched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass found required classes 'org.springframework.http.codec.multipart.DefaultPartHttpMessageReader', 'org.springframework.web.reactive.config.WebFluxConfigurer'"
            }
          ]
        },
        "ReactiveWebServerFactoryAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnWebApplicationCondition",
              "message": "not a reactive web application"
            }
          ],
          "matched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass found required class 'org.springframework.http.ReactiveHttpInputMessage'"
            }
          ]
        },
        "WebFluxAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnWebApplicationCondition",
              "message": "not a reactive web application"
            }
          ],
          "matched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass found required class 'org.springframework.web.reactive.config.WebFluxConfigurer'"
            }
          ]
        },
        "WebSessionIdResolverAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnWebApplicationCondition",
              "message": "not a reactive web application"
            }
          ],
          "matched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass found required classes 'org.springframework.web.server.session.WebSessionManager', 'reactor.core.publisher.Mono'"
            }
          ]
        },
        "ErrorWebFluxAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnWebApplicationCondition",
              "message": "not a reactive web application"
            }
          ],
          "matched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass found required class 'org.springframework.web.reactive.config.WebFluxConfigurer'"
            }
          ]
        },
        "ClientHttpConnectorConfiguration.HttpClient5": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required classes 'org.apache.hc.client5.http.impl.async.HttpAsyncClients', 'org.apache.hc.core5.http.nio.AsyncRequestProducer'"
            }
          ],
          "matched": []
        },
        "ClientHttpConnectorConfiguration.JdkClient": {
          "notMatched": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnMissingBean (types: org.springframework.http.client.reactive.ClientHttpConnector; SearchStrategy: all) found beans of type 'org.springframework.http.client.reactive.ClientHttpConnector' reactorClientHttpConnector"
            }
          ],
          "matched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass found required class 'java.net.http.HttpClient'"
            }
          ]
        },
        "ClientHttpConnectorConfiguration.JettyClient": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.eclipse.jetty.reactive.client.ReactiveRequest'"
            }
          ],
          "matched": []
        },
        "DispatcherServletAutoConfiguration.DispatcherServletConfiguration#multipartResolver": {
          "notMatched": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnBean (types: org.springframework.web.multipart.MultipartResolver; SearchStrategy: all) did not find any beans of type org.springframework.web.multipart.MultipartResolver"
            }
          ],
          "matched": []
        },
        "ServletWebServerFactoryAutoConfiguration.ForwardedHeaderFilterConfiguration": {
          "notMatched": [
            {
              "condition": "OnPropertyCondition",
              "message": "@ConditionalOnProperty (server.forward-headers-strategy=framework) did not find property 'server.forward-headers-strategy'"
            }
          ],
          "matched": []
        },
        "ServletWebServerFactoryConfiguration.EmbeddedJetty": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required classes 'org.eclipse.jetty.server.Server', 'org.eclipse.jetty.util.Loader', 'org.eclipse.jetty.webapp.WebAppContext'"
            }
          ],
          "matched": []
        },
        "ServletWebServerFactoryConfiguration.EmbeddedUndertow": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required classes 'io.undertow.Undertow', 'org.xnio.SslClientAuthMode'"
            }
          ],
          "matched": []
        },
        "WebMvcAutoConfiguration#hiddenHttpMethodFilter": {
          "notMatched": [
            {
              "condition": "OnPropertyCondition",
              "message": "@ConditionalOnProperty (spring.mvc.hiddenmethod.filter.enabled) did not find property 'enabled'"
            }
          ],
          "matched": []
        },
        "WebMvcAutoConfiguration.ProblemDetailsErrorHandlingConfiguration": {
          "notMatched": [
            {
              "condition": "OnPropertyCondition",
              "message": "@ConditionalOnProperty (spring.mvc.problemdetails.enabled=true) did not find property 'enabled'"
            }
          ],
          "matched": []
        },
        "WebMvcAutoConfiguration.ResourceChainCustomizerConfiguration": {
          "notMatched": [
            {
              "condition": "OnEnabledResourceChainCondition",
              "message": "@ConditionalOnEnabledResourceChain did not find class org.webjars.WebJarAssetLocator"
            }
          ],
          "matched": []
        },
        "WebMvcAutoConfiguration.WebMvcAutoConfigurationAdapter#beanNameViewResolver": {
          "notMatched": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnMissingBean (types: org.springframework.web.servlet.view.BeanNameViewResolver; SearchStrategy: all) found beans of type 'org.springframework.web.servlet.view.BeanNameViewResolver' beanNameViewResolver"
            }
          ],
          "matched": []
        },
        "WebServicesAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.springframework.ws.transport.http.MessageDispatcherServlet'"
            }
          ],
          "matched": []
        },
        "WebServiceTemplateAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.springframework.oxm.Marshaller'"
            }
          ],
          "matched": []
        },
        "WebSocketReactiveAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnWebApplicationCondition",
              "message": "not a reactive web application"
            }
          ],
          "matched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass found required classes 'jakarta.servlet.Servlet', 'jakarta.websocket.server.ServerContainer'"
            }
          ]
        },
        "WebSocketMessagingAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurer'"
            }
          ],
          "matched": []
        },
        "WebSocketServletAutoConfiguration.JettyWebSocketConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.eclipse.jetty.websocket.jakarta.server.config.JakartaWebSocketServletContainerInitializer'"
            }
          ],
          "matched": []
        },
        "WebSocketServletAutoConfiguration.UndertowWebSocketConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'io.undertow.websockets.jsr.Bootstrap'"
            }
          ],
          "matched": []
        },
        "DevToolsDataSourceAutoConfiguration": {
          "notMatched": [
            {
              "condition": "DevToolsDataSourceAutoConfiguration.DevToolsDataSourceCondition",
              "message": "DevTools DataSource Condition did not find a single DataSource bean"
            }
          ],
          "matched": [
            {
              "condition": "OnEnabledDevToolsCondition",
              "message": "Devtools devtools enabled."
            }
          ]
        },
        "DevToolsDataSourceAutoConfiguration.DatabaseShutdownExecutorEntityManagerFactoryDependsOnPostProcessor": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean'"
            },
            {
              "condition": "ConditionEvaluationReport.AncestorsMatchedCondition",
              "message": "Ancestor org.springframework.boot.devtools.autoconfigure.DevToolsDataSourceAutoConfiguration did not match"
            }
          ],
          "matched": []
        },
        "DevToolsR2dbcAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'io.r2dbc.spi.ConnectionFactory'"
            }
          ],
          "matched": []
        },
        "RemoteDevToolsAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnPropertyCondition",
              "message": "@ConditionalOnProperty (spring.devtools.remote.secret) did not find property 'secret'"
            }
          ],
          "matched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass found required classes 'jakarta.servlet.Filter', 'org.springframework.http.server.ServerHttpRequest'"
            }
          ]
        }
      },
      "unconditionalClasses": [
        "org.springframework.boot.autoconfigure.context.ConfigurationPropertiesAutoConfiguration",
        "org.springframework.boot.actuate.autoconfigure.availability.AvailabilityHealthContributorAutoConfiguration",
        "org.springframework.boot.actuate.autoconfigure.info.InfoContributorAutoConfiguration",
        "org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration",
        "org.springframework.boot.autoconfigure.context.LifecycleAutoConfiguration",
        "org.springframework.boot.actuate.autoconfigure.metrics.integration.IntegrationMetricsAutoConfiguration",
        "org.springframework.boot.actuate.autoconfigure.endpoint.EndpointAutoConfiguration",
        "org.springframework.boot.actuate.autoconfigure.web.server.ManagementContextAutoConfiguration",
        "org.springframework.boot.actuate.autoconfigure.health.HealthContributorAutoConfiguration",
        "org.springframework.boot.actuate.autoconfigure.endpoint.jackson.JacksonEndpointAutoConfiguration",
        "org.springframework.boot.autoconfigure.availability.ApplicationAvailabilityAutoConfiguration",
        "org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration"
      ]
    }
  }
}